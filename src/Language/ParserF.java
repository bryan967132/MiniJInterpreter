/* ParserF.java */
/* Generated By:JavaCC: Do not edit this line. ParserF.java */
/* 1. Package e importaciones */
package Language;
import Painter.WordPainter;
public class ParserF implements ParserFConstants {
/* 2. Configuraciones para el analisis (Operaciones y Declaraciones) */
    int nIB = 0;
    protected static WordPainter painter;
    public ParserF(String input, WordPainter painter) throws java.io.UnsupportedEncodingException {
        this(new java.io.ByteArrayInputStream(input.getBytes("utf-8")), null);
        ParserF.painter = painter;
    }

  final public void parse() throws ParseException {
    INIT();
}

// INIT := INSTRUCTIONS EOF
  final public void INIT() throws ParseException {
    INSTSGLOBAL();
    jj_consume_token(0);
}

// INSTSGLOBAL ::= INSTGLOBAL*
  final public void INSTSGLOBAL() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case RW_main:
      case RW_void:
      case RW_String:
      case RW_boolean:
      case RW_char:
      case RW_int:
      case RW_double:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      try {
        INSTGLOBAL();
      } catch (ParseException e) {
Token t = e.currentToken;
            painter.SERROR(t.beginColumn, t.image.length());
            do {
                t = getNextToken();
            } while(t.kind != TK_semicolon && t.kind != TK_rbrc && t != null && t.kind != EOF);
      }
    }
}

/* INSTGLOBAL ::=
    CALLMAINFUNC |
    DECLFUNC     
*/
  final public void INSTGLOBAL() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case RW_main:{
      CALLMAINFUNC();
      break;
      }
    case RW_void:
    case RW_String:
    case RW_boolean:
    case RW_char:
    case RW_int:
    case RW_double:{
      DECLFUNC();
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

// CALLMAINFUNC ::= 'main' CALLFUNC ';'
  final public void CALLMAINFUNC() throws ParseException {Token mn;
    mn = jj_consume_token(RW_main);
painter.RW4(mn.beginColumn, mn.image.length());
    CALLFUNC();
    jj_consume_token(TK_semicolon);
}

// CALLFUNC ::= TK_id '(' LISTARGS ')'
  final public void CALLFUNC() throws ParseException {Token id;
    id = jj_consume_token(TK_id);
painter.USEFNC(id.beginColumn, id.image.length());
    COLORLPAR();
    LISTARGS();
    COLORRPAR();
}

/* DECLFUNC ::=
    DATATYPE (TK_id '(' LISTPARAMS ')' ENV | INITIDS ';') |
    'void'   TK_id '(' LISTPARAMS ')' ENV                 
*/
  final public void DECLFUNC() throws ParseException {Token i;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case RW_String:
    case RW_boolean:
    case RW_char:
    case RW_int:
    case RW_double:{
      DATATYPE();
      if (jj_2_1(2)) {
        i = jj_consume_token(TK_id);
painter.FNC(i.beginColumn, i.image.length());
        COLORLPAR();
        LISTPARAMS();
        COLORRPAR();
        ENV();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case TK_id:{
          INITIDS();
          jj_consume_token(TK_semicolon);
          break;
          }
        default:
          jj_la1[2] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
      }
    case RW_void:{
      i = jj_consume_token(RW_void);
painter.RW1(i.beginColumn, i.image.length());
      i = jj_consume_token(TK_id);
painter.FNC(i.beginColumn, i.image.length());
      COLORLPAR();
      LISTPARAMS();
      COLORRPAR();
      ENV();
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

// LISTPARAMS ::= (DATATYPE TK_id (',' DATATYPE TK_id)*)?
  final public void LISTPARAMS() throws ParseException {Token id;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case RW_String:
    case RW_boolean:
    case RW_char:
    case RW_int:
    case RW_double:{
      DATATYPE();
      id = jj_consume_token(TK_id);
painter.VARIABLE(id.beginColumn, id.image.length());
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case TK_comma:{
          ;
          break;
          }
        default:
          jj_la1[4] = jj_gen;
          break label_2;
        }
        jj_consume_token(TK_comma);
        DATATYPE();
        id = jj_consume_token(TK_id);
painter.VARIABLE(id.beginColumn, id.image.length());
      }
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      ;
    }
}

// INITVAR ::= DATATYPE INITIDS ';'
  final public void INITVAR() throws ParseException {
    DATATYPE();
    INITIDS();
    jj_consume_token(TK_semicolon);
}

// INITIDS ::= TK_id ('=' EXP)? (',' TK_id ('=' EXP)?)*
  final public void INITIDS() throws ParseException {Token id;
    id = jj_consume_token(TK_id);
painter.VARIABLE(id.beginColumn, id.image.length());
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TK_equ:{
      jj_consume_token(TK_equ);
      EXP();
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TK_comma:{
        ;
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        break label_3;
      }
      jj_consume_token(TK_comma);
      id = jj_consume_token(TK_id);
painter.VARIABLE(id.beginColumn, id.image.length());
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TK_equ:{
        jj_consume_token(TK_equ);
        EXP();
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        ;
      }
    }
}

// IF ::= 'if' '(' EXP ')' ENV ('else' (IF | ENV))?
  final public void IF() throws ParseException {Token i;
    i = jj_consume_token(RW_if);
painter.RW2(i.beginColumn, i.image.length());
    COLORLPAR();
    EXP();
    COLORRPAR();
    ENV();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case RW_else:{
      i = jj_consume_token(RW_else);
painter.RW2(i.beginColumn, i.image.length());
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case RW_if:{
        IF();
        break;
        }
      case TK_lbrc:{
        ENV();
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[10] = jj_gen;
      ;
    }
}

// SWITCH ::= 'switch' '(' EXP ')' ENVS
  final public void SWITCH() throws ParseException {Token sw;
    sw = jj_consume_token(RW_switch);
painter.RW2(sw.beginColumn, sw.image.length());
    COLORLPAR();
    EXP();
    COLORRPAR();
    ENVS();
}

// ENVS ::= '{' CASESDEFAULT '}'
  final public void ENVS() throws ParseException {
    COLORLBRC();
    CASESDEFAULT();
    COLORRBRC();
}

// CASESDEFAULT ::= (CASES)? (DEFAULT)?
  final public void CASESDEFAULT() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case RW_case:{
      CASES();
      break;
      }
    default:
      jj_la1[11] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case RW_default:{
      DEFAULT();
      break;
      }
    default:
      jj_la1[12] = jj_gen;
      ;
    }
}

// CASES ::= (CASE)+
  final public void CASES() throws ParseException {
    label_4:
    while (true) {
      CASE();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case RW_case:{
        ;
        break;
        }
      default:
        jj_la1[13] = jj_gen;
        break label_4;
      }
    }
}

// CASE ::= 'case' EXP ':' (ENV | INSTRUCTIONS)
  final public void CASE() throws ParseException {Token c;
    c = jj_consume_token(RW_case);
painter.RW2(c.beginColumn, c.image.length());
    EXP();
    c = jj_consume_token(TK_colon);
painter.SYMBS1(c.beginColumn, c.image.length());
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TK_lbrc:{
      ENV();
      break;
      }
    default:
      jj_la1[14] = jj_gen;
      INSTRUCTIONS();
    }
}

// DEFAULT ::= 'default' ':' (ENV | INSTRUCTIONS)
  final public void DEFAULT() throws ParseException {Token d;
    d = jj_consume_token(RW_default);
painter.RW2(d.beginColumn, d.image.length());
    d = jj_consume_token(TK_colon);
painter.SYMBS1(d.beginColumn, d.image.length());
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TK_lbrc:{
      ENV();
      break;
      }
    default:
      jj_la1[15] = jj_gen;
      INSTRUCTIONS();
    }
}

// FOR ::= 'for' '(' ARGSFOR ')' ENV
  final public void FOR() throws ParseException {Token f;
    f = jj_consume_token(RW_for);
painter.RW2(f.beginColumn, f.image.length());
    COLORLPAR();
    ARGSFOR();
    COLORRPAR();
    ENV();
}

// ARGSFOR ::= (UPDATESFOR)? ';' (EXP)? ';' (UPDATESFOR)?
  final public void ARGSFOR() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case RW_String:
    case RW_boolean:
    case RW_char:
    case RW_int:
    case RW_double:
    case TK_id:{
      INITIALIZEFOR();
      break;
      }
    default:
      jj_la1[16] = jj_gen;
      ;
    }
    jj_consume_token(TK_semicolon);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case RW_String:
    case RW_boolean:
    case RW_char:
    case RW_int:
    case RW_double:
    case RW_true:
    case RW_false:
    case RW_round:
    case RW_abs:
    case TK_char:
    case TK_string:
    case TK_int:
    case TK_double:
    case TK_id:
    case TK_minus:
    case TK_not:
    case TK_lpar:
    case TK_lbrk:{
      EXP();
      break;
      }
    default:
      jj_la1[17] = jj_gen;
      ;
    }
    jj_consume_token(TK_semicolon);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TK_id:{
      UPDATESFOR();
      break;
      }
    default:
      jj_la1[18] = jj_gen;
      ;
    }
}

/* INITIALIZEFOR ::=
    DATATYPE INITIDSFOR |
    REASIGNS            
*/
  final public void INITIALIZEFOR() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case RW_String:
    case RW_boolean:
    case RW_char:
    case RW_int:
    case RW_double:{
      DATATYPE();
      REASIGNS();
      break;
      }
    case TK_id:{
      REASIGNS();
      break;
      }
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

// REASIGNS ::= ASSIGN (',' ASSIGN)*
  final public void REASIGNS() throws ParseException {
    IDPOS();
    jj_consume_token(TK_equ);
    EXP();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TK_comma:{
        ;
        break;
        }
      default:
        jj_la1[20] = jj_gen;
        break label_5;
      }
      jj_consume_token(TK_comma);
      IDPOS();
      jj_consume_token(TK_equ);
      EXP();
    }
}

// UPDATESFOR ::= ASSIGN (',' ASSIGN)*
  final public void UPDATESFOR() throws ParseException {
    ASSIGN();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TK_comma:{
        ;
        break;
        }
      default:
        jj_la1[21] = jj_gen;
        break label_6;
      }
      jj_consume_token(TK_comma);
      ASSIGN();
    }
}

// WHILE ::= 'while' '(' EXP ')' ENV
  final public void WHILE() throws ParseException {Token w;
    w = jj_consume_token(RW_while);
painter.RW2(w.beginColumn, w.image.length());
    COLORLPAR();
    EXP();
    COLORRPAR();
    ENV();
}

// DOWHILE ::= 'do' ENV 'while' '(' EXP ')' ';'
  final public void DOWHILE() throws ParseException {Token w;
    w = jj_consume_token(RW_do);
painter.RW2(w.beginColumn, w.image.length());
    ENV();
    w = jj_consume_token(RW_while);
painter.RW2(w.beginColumn, w.image.length());
    COLORLPAR();
    EXP();
    COLORRPAR();
    jj_consume_token(TK_semicolon);
}

// ASSIGN ::= TK_id (('=' | '+=' | '-=' | '*=' | '/=' | '%=') EXP | ('++' | '--'))
  final public void ASSIGN() throws ParseException {
    IDPOS();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TK_plusc:
    case TK_minusc:
    case TK_multc:
    case TK_divc:
    case TK_modc:
    case TK_equ:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TK_equ:{
        jj_consume_token(TK_equ);
        break;
        }
      case TK_plusc:{
        jj_consume_token(TK_plusc);
        break;
        }
      case TK_minusc:{
        jj_consume_token(TK_minusc);
        break;
        }
      case TK_multc:{
        jj_consume_token(TK_multc);
        break;
        }
      case TK_divc:{
        jj_consume_token(TK_divc);
        break;
        }
      case TK_modc:{
        jj_consume_token(TK_modc);
        break;
        }
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      EXP();
      break;
      }
    case TK_inc:
    case TK_dec:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TK_inc:{
        jj_consume_token(TK_inc);
        break;
        }
      case TK_dec:{
        jj_consume_token(TK_dec);
        break;
        }
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

// IDPOS ::= TK_id VECTORPOS?
  final public void IDPOS() throws ParseException {Token id;
    id = jj_consume_token(TK_id);
painter.USEVARIABLE(id.beginColumn, id.image.length());
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TK_lbrk:{
      VECTORPOS();
      break;
      }
    default:
      jj_la1[25] = jj_gen;
      ;
    }
}

// PRINT ::= 'PRINT' '(' EXP? ')' ';'
  final public void PRINT() throws ParseException {Token p;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case RW_println:{
      p = jj_consume_token(RW_println);
painter.USEFNC(p.beginColumn, p.image.length());
      COLORLPAR();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case RW_String:
      case RW_boolean:
      case RW_char:
      case RW_int:
      case RW_double:
      case RW_true:
      case RW_false:
      case RW_round:
      case RW_abs:
      case TK_char:
      case TK_string:
      case TK_int:
      case TK_double:
      case TK_id:
      case TK_minus:
      case TK_not:
      case TK_lpar:
      case TK_lbrk:{
        EXP();
        break;
        }
      default:
        jj_la1[26] = jj_gen;
        ;
      }
      COLORRPAR();
      jj_consume_token(TK_semicolon);
      break;
      }
    case RW_print:{
      p = jj_consume_token(RW_print);
painter.USEFNC(p.beginColumn, p.image.length());
      COLORLPAR();
      EXP();
      COLORRPAR();
      jj_consume_token(TK_semicolon);
      break;
      }
    default:
      jj_la1[27] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

// ENV ::= '{' INSTRUCTIONS '}'
  final public void ENV() throws ParseException {
    COLORLBRC();
    INSTRUCTIONS();
    COLORRBRC();
}

// INSTRUCTIONS ::= INSTRUCTION*
  final public void INSTRUCTIONS() throws ParseException {
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case RW_String:
      case RW_boolean:
      case RW_char:
      case RW_int:
      case RW_double:
      case RW_if:
      case RW_for:
      case RW_while:
      case RW_do:
      case RW_switch:
      case RW_break:
      case RW_continue:
      case RW_return:
      case RW_println:
      case RW_print:
      case TK_id:{
        ;
        break;
        }
      default:
        jj_la1[28] = jj_gen;
        break label_7;
      }
      try {
        INSTRUCTION();
      } catch (ParseException e) {
Token t = e.currentToken;
            painter.SERROR(t.beginColumn, t.image.length());
            do {
                t = getNextToken();
            } while(t.kind != TK_semicolon && t.kind != TK_rbrc && t != null && t.kind != EOF);
      }
    }
}

/* INSTRUCTION ::=
    INITVAR       |
    IF            |
    SWITCH        |
    FOR           |
    WHILE         |
    DOWHILE       |
    ASSIGN        |
    CALLFUNC ';'  |
    PRINT         |
    'return' EXP? |
    'continue'    |
    'break'       
*/
  final public void INSTRUCTION() throws ParseException {Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case RW_String:
    case RW_boolean:
    case RW_char:
    case RW_int:
    case RW_double:{
      INITVAR();
      break;
      }
    case RW_if:{
      IF();
      break;
      }
    case RW_switch:{
      SWITCH();
      break;
      }
    case RW_for:{
      FOR();
      break;
      }
    case RW_while:{
      WHILE();
      break;
      }
    case RW_do:{
      DOWHILE();
      break;
      }
    default:
      jj_la1[30] = jj_gen;
      if (jj_2_2(2)) {
        ASSIGN();
        jj_consume_token(TK_semicolon);
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case TK_id:{
          CALLFUNC();
          jj_consume_token(TK_semicolon);
          break;
          }
        case RW_println:
        case RW_print:{
          PRINT();
          break;
          }
        case RW_return:{
          t = jj_consume_token(RW_return);
painter.RW2(t.beginColumn, t.image.length());
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case RW_String:
          case RW_boolean:
          case RW_char:
          case RW_int:
          case RW_double:
          case RW_true:
          case RW_false:
          case RW_round:
          case RW_abs:
          case TK_char:
          case TK_string:
          case TK_int:
          case TK_double:
          case TK_id:
          case TK_minus:
          case TK_not:
          case TK_lpar:
          case TK_lbrk:{
            EXP();
            break;
            }
          default:
            jj_la1[29] = jj_gen;
            ;
          }
          jj_consume_token(TK_semicolon);
          break;
          }
        case RW_continue:{
          t = jj_consume_token(RW_continue);
painter.RW2(t.beginColumn, t.image.length());
          jj_consume_token(TK_semicolon);
          break;
          }
        case RW_break:{
          t = jj_consume_token(RW_break);
painter.RW2(t.beginColumn, t.image.length());
          jj_consume_token(TK_semicolon);
          break;
          }
        default:
          jj_la1[31] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
}

// DATATYPE ::= TYPE VECTORTYPE?
  final public void DATATYPE() throws ParseException {
    TYPE();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TK_lbrk:{
      VECTORTYPE();
      break;
      }
    default:
      jj_la1[32] = jj_gen;
      ;
    }
}

// VECTORTYPE ::= '[' VECTORTYPE2? ']'
  final public void VECTORTYPE() throws ParseException {
    COLORLBRK();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TK_lbrk:{
      VECTORTYPE2();
      break;
      }
    default:
      jj_la1[33] = jj_gen;
      ;
    }
    COLORRBRK();
}

// VECTORTYPE2 ::= '[' VECTORTYPE? ']'
  final public void VECTORTYPE2() throws ParseException {
    COLORLBRK();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TK_lbrk:{
      VECTORTYPE();
      break;
      }
    default:
      jj_la1[34] = jj_gen;
      ;
    }
    COLORRBRK();
}

/* TYPE ::=
    RW_String  |
    RW_int     |
    RW_boolean |
    RW_char    |
    RW_double  
*/
  final public void TYPE() throws ParseException {Token tp;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case RW_String:{
      tp = jj_consume_token(RW_String);
painter.RW5(tp.beginColumn, tp.image.length());
      break;
      }
    case RW_int:{
      tp = jj_consume_token(RW_int);
painter.RW1(tp.beginColumn, tp.image.length());
      break;
      }
    case RW_boolean:{
      tp = jj_consume_token(RW_boolean);
painter.RW1(tp.beginColumn, tp.image.length());
      break;
      }
    case RW_char:{
      tp = jj_consume_token(RW_char);
painter.RW1(tp.beginColumn, tp.image.length());
      break;
      }
    case RW_double:{
      tp = jj_consume_token(RW_double);
painter.RW1(tp.beginColumn, tp.image.length());
      break;
      }
    default:
      jj_la1[35] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

// EXP ::= opOr ('?' opOr ':' opOr)?
  final public void EXP() throws ParseException {Token t;
    opOr();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TK_question:{
      t = jj_consume_token(TK_question);
painter.SYMBS1(t.beginColumn, t.image.length());
      opOr();
      t = jj_consume_token(TK_colon);
painter.SYMBS1(t.beginColumn, t.image.length());
      opOr();
      break;
      }
    default:
      jj_la1[36] = jj_gen;
      ;
    }
}

// opOr ::= opAnd ('||' opAnd)*
  final public void opOr() throws ParseException {
    opAnd();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TK_or:{
        ;
        break;
        }
      default:
        jj_la1[37] = jj_gen;
        break label_8;
      }
      jj_consume_token(TK_or);
      opAnd();
    }
}

// opAnd ::= opEqu ('&&' opEqu)*
  final public void opAnd() throws ParseException {
    opEqu();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TK_and:{
        ;
        break;
        }
      default:
        jj_la1[38] = jj_gen;
        break label_9;
      }
      jj_consume_token(TK_and);
      opEqu();
    }
}

// opEqu ::= opCmp (('==' | '!=') opCmp)*
  final public void opEqu() throws ParseException {
    opCmp();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TK_equequ:
      case TK_notequ:{
        ;
        break;
        }
      default:
        jj_la1[39] = jj_gen;
        break label_10;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TK_equequ:{
        jj_consume_token(TK_equequ);
        break;
        }
      case TK_notequ:{
        jj_consume_token(TK_notequ);
        break;
        }
      default:
        jj_la1[40] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      opCmp();
    }
}

// opCmp ::= opAdd (('<=' | '>=' |'<' | '>') opAdd)*
  final public void opCmp() throws ParseException {
    opAdd();
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TK_lessequ:
      case TK_moreequ:
      case TK_less:
      case TK_more:{
        ;
        break;
        }
      default:
        jj_la1[41] = jj_gen;
        break label_11;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TK_lessequ:{
        jj_consume_token(TK_lessequ);
        break;
        }
      case TK_moreequ:{
        jj_consume_token(TK_moreequ);
        break;
        }
      case TK_less:{
        jj_consume_token(TK_less);
        break;
        }
      case TK_more:{
        jj_consume_token(TK_more);
        break;
        }
      default:
        jj_la1[42] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      opAdd();
    }
}

// opAdd ::= opMult (('+' | '-') opMult)*
  final public void opAdd() throws ParseException {
    opMult();
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TK_plus:
      case TK_minus:{
        ;
        break;
        }
      default:
        jj_la1[43] = jj_gen;
        break label_12;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TK_plus:{
        jj_consume_token(TK_plus);
        break;
        }
      case TK_minus:{
        jj_consume_token(TK_minus);
        break;
        }
      default:
        jj_la1[44] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      opMult();
    }
}

// opMult ::= unary (('*' | '/' | '%') unary)*
  final public void opMult() throws ParseException {
    unary();
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TK_mult:
      case TK_div:
      case TK_mod:{
        ;
        break;
        }
      default:
        jj_la1[45] = jj_gen;
        break label_13;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TK_mult:{
        jj_consume_token(TK_mult);
        break;
        }
      case TK_div:{
        jj_consume_token(TK_div);
        break;
        }
      case TK_mod:{
        jj_consume_token(TK_mod);
        break;
        }
      default:
        jj_la1[46] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      unary();
    }
}

/* unary ::=
    '-' unary |
    '!' unary |
    primitive 
*/
  final public void unary() throws ParseException {Token id;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TK_minus:{
      jj_consume_token(TK_minus);
      unary();
      break;
      }
    case TK_not:{
      jj_consume_token(TK_not);
      unary();
      break;
      }
    case RW_String:
    case RW_boolean:
    case RW_char:
    case RW_int:
    case RW_double:
    case RW_true:
    case RW_false:
    case RW_round:
    case RW_abs:
    case TK_char:
    case TK_string:
    case TK_int:
    case TK_double:
    case TK_id:
    case TK_lpar:
    case TK_lbrk:{
      primitive();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TK_dot:{
        jj_consume_token(TK_dot);
        id = jj_consume_token(RW_size);
painter.ATTRIB(id.beginColumn, id.image.length());
        break;
        }
      default:
        jj_la1[47] = jj_gen;
        ;
      }
      break;
      }
    default:
      jj_la1[48] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

/* primitive ::=
    ACCESS      |
    CAST        |
    NATIVEFUNC  |
    VECTOR      |
    TK_id       |
    TK_string   |
    TK_char     |
    TK_int      |
    TK_double   |
    RW_true     |
    RW_false    |
    '(' EXP ')' 
*/
  final public void primitive() throws ParseException {Token tr;
    if (jj_2_3(2)) {
      ACCESS();
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case RW_String:
      case RW_boolean:
      case RW_char:
      case RW_int:
      case RW_double:{
        CAST();
        break;
        }
      case RW_round:
      case RW_abs:{
        NATIVEFUNC();
        break;
        }
      case TK_lbrk:{
        VECTOR();
        break;
        }
      case TK_id:{
        tr = jj_consume_token(TK_id);
painter.USEVARIABLE(tr.beginColumn, tr.image.length());
        break;
        }
      case TK_string:{
        tr = jj_consume_token(TK_string);
painter.STRING(tr.beginColumn, tr.image.length());
        break;
        }
      case TK_char:{
        tr = jj_consume_token(TK_char);
painter.CHAR(tr.beginColumn, tr.image.length());
        break;
        }
      case TK_int:{
        tr = jj_consume_token(TK_int);
painter.NUMBER(tr.beginColumn, tr.image.length());
        break;
        }
      case TK_double:{
        tr = jj_consume_token(TK_double);
painter.NUMBER(tr.beginColumn, tr.image.length());
        break;
        }
      case RW_true:{
        tr = jj_consume_token(RW_true);
painter.RW3(tr.beginColumn, tr.image.length());
        break;
        }
      case RW_false:{
        tr = jj_consume_token(RW_false);
painter.RW3(tr.beginColumn, tr.image.length());
        break;
        }
      case TK_lpar:{
        COLORLPAR();
        EXP();
        COLORRPAR();
        break;
        }
      default:
        jj_la1[49] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
}

// ACCESS ::= TK_id ('(' LISTARGS ')' | VECTORPOS? ('++' | '--')?)
  final public void ACCESS() throws ParseException {Token id;
    id = jj_consume_token(TK_id);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TK_lpar:{
painter.USEFNC(id.beginColumn, id.image.length());
      COLORLPAR();
      LISTARGS();
      COLORRPAR();
      break;
      }
    default:
      jj_la1[53] = jj_gen;
painter.USEVARIABLE(id.beginColumn, id.image.length());
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TK_lbrk:{
        VECTORPOS();
        break;
        }
      default:
        jj_la1[50] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TK_inc:
      case TK_dec:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case TK_inc:{
          jj_consume_token(TK_inc);
          break;
          }
        case TK_dec:{
          jj_consume_token(TK_dec);
          break;
          }
        default:
          jj_la1[51] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        jj_la1[52] = jj_gen;
        ;
      }
    }
}

// LISTARGS ::= (EXP (',' EXP)*)?
  final public void LISTARGS() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case RW_String:
    case RW_boolean:
    case RW_char:
    case RW_int:
    case RW_double:
    case RW_true:
    case RW_false:
    case RW_round:
    case RW_abs:
    case TK_char:
    case TK_string:
    case TK_int:
    case TK_double:
    case TK_id:
    case TK_minus:
    case TK_not:
    case TK_lpar:
    case TK_lbrk:{
      EXP();
      label_14:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case TK_comma:{
          ;
          break;
          }
        default:
          jj_la1[54] = jj_gen;
          break label_14;
        }
        jj_consume_token(TK_comma);
        EXP();
      }
      break;
      }
    default:
      jj_la1[55] = jj_gen;
      ;
    }
}

// VECTORPOS ::= '[' EXP ']' ('[' EXP ']')*
  final public void VECTORPOS() throws ParseException {
    COLORLBRK();
    EXP();
    COLORRBRK();
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TK_lbrk:{
        ;
        break;
        }
      default:
        jj_la1[56] = jj_gen;
        break label_15;
      }
      COLORLBRK();
      EXP();
      COLORRBRK();
    }
}

// CAST ::= TYPE '(' EXP ')'
  final public void CAST() throws ParseException {
    TYPE();
    COLORLPAR();
    EXP();
    COLORRPAR();
}

/* NATIVEFUNC ::=
    'round' '(' EXP (',' EXP)? ')' |
    'abs'   '(' EXP ')'            
*/
  final public void NATIVEFUNC() throws ParseException {Token n;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case RW_round:{
      n = jj_consume_token(RW_round);
painter.USEFNC(n.beginColumn, n.image.length());
      COLORLPAR();
      EXP();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TK_comma:{
        jj_consume_token(TK_comma);
        EXP();
        break;
        }
      default:
        jj_la1[57] = jj_gen;
        ;
      }
      COLORRPAR();
      break;
      }
    case RW_abs:{
      n = jj_consume_token(RW_abs);
painter.USEFNC(n.beginColumn, n.image.length());
      COLORLPAR();
      EXP();
      COLORRPAR();
      break;
      }
    default:
      jj_la1[58] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

// VECTOR ::= '[' (EXP (',' EXP)*)? ']'
  final public void VECTOR() throws ParseException {
    COLORLBRK();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case RW_String:
    case RW_boolean:
    case RW_char:
    case RW_int:
    case RW_double:
    case RW_true:
    case RW_false:
    case RW_round:
    case RW_abs:
    case TK_char:
    case TK_string:
    case TK_int:
    case TK_double:
    case TK_id:
    case TK_minus:
    case TK_not:
    case TK_lpar:
    case TK_lbrk:{
      EXP();
      label_16:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case TK_comma:{
          ;
          break;
          }
        default:
          jj_la1[59] = jj_gen;
          break label_16;
        }
        jj_consume_token(TK_comma);
        EXP();
      }
      break;
      }
    default:
      jj_la1[60] = jj_gen;
      ;
    }
    COLORRBRK();
}

  final public void COLORLBRK() throws ParseException {Token l;
    l = jj_consume_token(TK_lbrk);
painter.BRKT(nIB, l.beginColumn, l.image.length()); nIB ++;
}

  final public void COLORRBRK() throws ParseException {Token r;
    r = jj_consume_token(TK_rbrk);
nIB --; painter.BRKT(nIB, r.beginColumn, r.image.length());
}

  final public void COLORLBRC() throws ParseException {Token l;
    l = jj_consume_token(TK_lbrc);
painter.BRKT(nIB, l.beginColumn, l.image.length()); nIB ++;
}

  final public void COLORRBRC() throws ParseException {Token r;
    r = jj_consume_token(TK_rbrc);
nIB --; painter.BRKT(nIB, r.beginColumn, r.image.length());
}

  final public void COLORLPAR() throws ParseException {Token l;
    l = jj_consume_token(TK_lpar);
painter.BRKT(nIB, l.beginColumn, l.image.length()); nIB ++;
}

  final public void COLORRPAR() throws ParseException {Token r;
    r = jj_consume_token(TK_rpar);
nIB --; painter.BRKT(nIB, r.beginColumn, r.image.length());
}

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_2()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_3()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_3R_ACCESS_458_68_26()
 {
    if (jj_3R_VECTORPOS_467_5_28()) return true;
    return false;
  }

  private boolean jj_3R_ASSIGN_289_5_18()
 {
    if (jj_3R_IDPOS_295_5_20()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ASSIGN_289_14_21()) {
    jj_scanpos = xsp;
    if (jj_3R_ASSIGN_289_96_22()) return true;
    }
    return false;
  }

  private boolean jj_3R_ASSIGN_289_96_22()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(31)) {
    jj_scanpos = xsp;
    if (jj_scan_token(32)) return true;
    }
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_scan_token(TK_id)) return true;
    if (jj_3R_COLORLPAR_515_5_17()) return true;
    return false;
  }

  private boolean jj_3R_COLORLPAR_515_5_17()
 {
    if (jj_scan_token(TK_lpar)) return true;
    return false;
  }

  private boolean jj_3R_COLORLBRK_491_5_29()
 {
    if (jj_scan_token(TK_lbrk)) return true;
    return false;
  }

  private boolean jj_3R_VECTORPOS_467_5_28()
 {
    if (jj_3R_COLORLBRK_491_5_29()) return true;
    return false;
  }

  private boolean jj_3R_ACCESS_458_83_27()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(31)) {
    jj_scanpos = xsp;
    if (jj_scan_token(32)) return true;
    }
    return false;
  }

  private boolean jj_3R_ACCESS_458_9_24()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ACCESS_458_68_26()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_ACCESS_458_83_27()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_3()
 {
    if (jj_3R_ACCESS_456_5_19()) return true;
    return false;
  }

  private boolean jj_3R_ACCESS_457_9_23()
 {
    if (jj_3R_COLORLPAR_515_5_17()) return true;
    return false;
  }

  private boolean jj_3_2()
 {
    if (jj_3R_ASSIGN_289_5_18()) return true;
    return false;
  }

  private boolean jj_3R_IDPOS_295_77_25()
 {
    if (jj_3R_VECTORPOS_467_5_28()) return true;
    return false;
  }

  private boolean jj_3R_ASSIGN_289_14_21()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(47)) {
    jj_scanpos = xsp;
    if (jj_scan_token(33)) {
    jj_scanpos = xsp;
    if (jj_scan_token(34)) {
    jj_scanpos = xsp;
    if (jj_scan_token(35)) {
    jj_scanpos = xsp;
    if (jj_scan_token(36)) {
    jj_scanpos = xsp;
    if (jj_scan_token(37)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_IDPOS_295_5_20()
 {
    if (jj_scan_token(TK_id)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_IDPOS_295_77_25()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_ACCESS_456_5_19()
 {
    if (jj_scan_token(TK_id)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ACCESS_457_9_23()) {
    jj_scanpos = xsp;
    if (jj_3R_ACCESS_458_9_24()) return true;
    }
    return false;
  }

  /** Generated Token Manager. */
  public ParserFTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[61];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	   jj_la1_init_2();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0xfe,0xfe,0x40000000,0xfc,0x0,0xf8,0x0,0x0,0x0,0x100,0x200,0x4000,0x8000,0x4000,0x0,0x0,0x400000f8,0x7e9800f8,0x40000000,0x400000f8,0x0,0x0,0x0,0x80000000,0x80000000,0x0,0x7e9800f8,0x600000,0x40673df8,0x7e9800f8,0x3df8,0x40670000,0x0,0x0,0x0,0xf8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7e9800f8,0x7e9800f8,0x0,0x80000000,0x80000000,0x0,0x0,0x7e9800f8,0x0,0x0,0x2800000,0x0,0x7e9800f8,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x10000000,0x0,0x8000,0x10000000,0x8000,0x800000,0x0,0x0,0x0,0x0,0x800000,0x800000,0x0,0x2300080,0x0,0x0,0x10000000,0x10000000,0x803e,0x1,0x803f,0x2000000,0x2300080,0x0,0x0,0x2300080,0x0,0x0,0x2000000,0x2000000,0x2000000,0x0,0x80000000,0x80000,0x40000,0x1800,0x1800,0x36000,0x36000,0xc0,0xc0,0x700,0x700,0x8000000,0x2300080,0x2200000,0x2000000,0x1,0x1,0x200000,0x10000000,0x2300080,0x2000000,0x10000000,0x0,0x10000000,0x2300080,};
	}
	private static void jj_la1_init_2() {
	   jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
	}
  final private JJCalls[] jj_2_rtns = new JJCalls[3];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public ParserF(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ParserF(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new ParserFTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 61; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 61; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public ParserF(java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new ParserFTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 61; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new ParserFTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 61; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public ParserF(ParserFTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 61; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ParserFTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 61; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   if (++jj_gc > 100) {
		 jj_gc = 0;
		 for (int i = 0; i < jj_2_rtns.length; i++) {
		   JJCalls c = jj_2_rtns[i];
		   while (c != null) {
			 if (c.gen < jj_gen) c.first = null;
			 c = c.next;
		   }
		 }
	   }
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error {
    @Override
    public Throwable fillInStackTrace() {
      return this;
    }
  }
  static private final LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		 jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		 jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
	 if (jj_rescan) {
	   int i = 0; Token tok = token;
	   while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	   if (tok != null) jj_add_error_token(kind, i);
	 }
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	 return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
	 if (pos >= 100) {
		return;
	 }

	 if (pos == jj_endpos + 1) {
	   jj_lasttokens[jj_endpos++] = kind;
	 } else if (jj_endpos != 0) {
	   jj_expentry = new int[jj_endpos];

	   for (int i = 0; i < jj_endpos; i++) {
		 jj_expentry[i] = jj_lasttokens[i];
	   }

	   for (int[] oldentry : jj_expentries) {
		 if (oldentry.length == jj_expentry.length) {
		   boolean isMatched = true;

		   for (int i = 0; i < jj_expentry.length; i++) {
			 if (oldentry[i] != jj_expentry[i]) {
			   isMatched = false;
			   break;
			 }

		   }
		   if (isMatched) {
			 jj_expentries.add(jj_expentry);
			 break;
		   }
		 }
	   }

	   if (pos != 0) {
		 jj_lasttokens[(jj_endpos = pos) - 1] = kind;
	   }
	 }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[71];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 61; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		   if ((jj_la1_2[i] & (1<<j)) != 0) {
			 la1tokens[64+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 71; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 jj_endpos = 0;
	 jj_rescan_token();
	 jj_add_error_token(0, 0);
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
	 jj_rescan = true;
	 for (int i = 0; i < 3; i++) {
	   try {
		 JJCalls p = jj_2_rtns[i];

		 do {
		   if (p.gen > jj_gen) {
			 jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
			 switch (i) {
			   case 0: jj_3_1(); break;
			   case 1: jj_3_2(); break;
			   case 2: jj_3_3(); break;
			 }
		   }
		   p = p.next;
		 } while (p != null);

		 } catch(LookaheadSuccess ls) { }
	 }
	 jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
	 JJCalls p = jj_2_rtns[index];
	 while (p.gen > jj_gen) {
	   if (p.next == null) { p = p.next = new JJCalls(); break; }
	   p = p.next;
	 }

	 p.gen = jj_gen + xla - jj_la; 
	 p.first = token;
	 p.arg = xla;
  }

  static final class JJCalls {
	 int gen;
	 Token first;
	 int arg;
	 JJCalls next;
  }

}
