options {
    STATIC = false;
}

PARSER_BEGIN(Parser)

/* 1. Package e importaciones */
package Language;
import java.util.ArrayList;
import Classes.Abstracts.*;
import Classes.Expressions.*;
import Classes.Instructions.*;
import Classes.Utils.DataType;
import Classes.Utils.IDPos;
import Classes.Utils.IDValue;
import Classes.Utils.InitializeFor;
import Classes.Utils.Outs;
import Classes.Utils.Parameter;
import Classes.Utils.Type;
import Classes.Utils.TypeError;
@SuppressWarnings({"unused", "unchecked"})
public class Parser {
/* 2. Configuraciones para el analisis (Operaciones y Declaraciones) */
    public Parser(String input) throws java.io.UnsupportedEncodingException {
        this(new java.io.ByteArrayInputStream(input.getBytes("utf-8")), null);
    }
}

PARSER_END(Parser)

/* 3. Reglas Semanticas */
// Reservadas
TOKEN : {
    <RW_main     : "main">     |
    <RW_void     : "void">     |
    <RW_String   : "String">   |
    <RW_boolean  : "boolean">  |
    <RW_char     : "char">     |
    <RW_int      : "int">      |
    <RW_double   : "double">   |
    <RW_if       : "if">       |
    <RW_else     : "else">     |
    <RW_for      : "for">      |
    <RW_while    : "while">    |
    <RW_do       : "do">       |
    <RW_switch   : "switch">   |
    <RW_case     : "case">     |
    <RW_default  : "default">  |
    <RW_break    : "break">    |
    <RW_continue : "continue"> |
    <RW_return   : "return">   |
    <RW_true     : "true">     |
    <RW_false    : "false">    |
    <RW_println  : "println">  |
    <RW_print    : "print">    |
    <RW_round    : "round">    |
    <RW_size     : "size">     |
    <RW_abs      : "abs">      
}

// Valores
TOKEN : {
    <TK_char   : "'"((~["\n","\'","\\"])|(["\\"])(~[]))"'">      {matchedToken.image = matchedToken.image.substring(1, matchedToken.image.length() - 1);} |
    <TK_string : "\""(((~["\n","\"","\\"])|(["\\"])(~[]))*)"\""> {matchedToken.image = matchedToken.image.substring(1, matchedToken.image.length() - 1);} |
    <TK_int    : (["0"-"9"])+>                                   |
    <TK_double : (["0"-"9"])+"."(["0"-"9"])+>                    
}

// Variables
TOKEN : {
    <TK_id : (["_"])*(["a"-"z","A"-"Z"])(["a"-"z","A"-"Z","_"]|["0"-"9"])*>
}

// Incremento / Decremento
TOKEN : {
    <TK_inc : "++"> |
    <TK_dec : "--"> 
}

// Concatenacion
TOKEN : {
    <TK_plusc  : "+="> |
    <TK_minusc : "-="> |
    <TK_multc  : "*="> |
    <TK_divc   : "/="> |
    <TK_modc   : "%="> 
}

// Operadores Aritméticos
TOKEN : {
    <TK_plus  : "+"> |
    <TK_minus : "-"> |
    <TK_mult  : "*"> |
    <TK_div   : "/"> |
    <TK_mod   : "%"> 
}

// Operadores Relacionales
TOKEN : {
    <TK_equequ     : "=="> |
    <TK_notequ     : "!="> |
    <TK_lessequ    : "<="> |
    <TK_greaterequ : ">="> |
    <TK_equ        : "=">  |
    <TK_less       : "<">  |
    <TK_greater    : ">">  
}

// Operadores Lógicos
TOKEN : {
    <TK_and : "&&"> |
    <TK_or  : "||"> |
    <TK_not : "!">  
}

// Símbolos de Agrupación
TOKEN : {
    <TK_lpar : "("> |
    <TK_rpar : ")"> |
    <TK_lbrc : "{"> |
    <TK_rbrc : "}"> |
    <TK_lbrk : "["> |
    <TK_rbrk : "]"> 
}

// Signos
TOKEN : {
    <TK_dot       : "."> |
    <TK_comma     : ","> |
    <TK_colon     : ":"> |
    <TK_semicolon : ";"> |
    <TK_question  : "?"> 
}

SKIP : {
    "\n"
}

SKIP : {
	" "  |
    "\r" |
    "\t" 
}

SKIP : {
    <"//"(~["\r","\n"])*>                                |
    <"/""*"(~["*"])*"*"("*"|~["*","/"](~["*"])*"*")*"/"> |
    <(~[])> {Outs.errors.add(Outs.newError(input_stream.line, input_stream.column, TypeError.LEXICAL, "Caracter no reconocido. \"" + image + "\""));}
}

ArrayList<Instruction> parse() : {
    ArrayList<Instruction> ins;
} {
    ins = INIT() {return ins;}
}

// INIT ::= INSTRUCTIONS EOF
ArrayList<Instruction> INIT() : {
    ArrayList<Instruction> ins;
} {
	ins = INSTSGLOBAL() <EOF> {return ins;}
}
// INSTSGLOBAL ::= INSTGLOBAL*
ArrayList<Instruction> INSTSGLOBAL() : {
    Instruction i;
    ArrayList<Instruction> l = new ArrayList<>();
} {
    (
        try {
            i = INSTGLOBAL() {l.add(i);}
        } catch(ParseException e) {
            Token t = getNextToken();
            Outs.errors.add(Outs.newError(t.beginLine, t.beginColumn, TypeError.SYNTAX, "No se esperaba \"" + t.image + "\""));
            while(t.kind != TK_semicolon && t.kind != TK_rbrc && t != null && t.kind != EOF) {
                t = getNextToken();
            }
        }
    )* {return l;}
}
/* INSTGLOBAL ::=
    CALLMAINFUNC |
    DECLFUNC     
*/
Instruction INSTGLOBAL() : {
    Instruction inst;
} {
    inst = CALLMAINFUNC() {return inst;} |
    inst = DECLFUNC()     {return inst;} 
}
// CALLMAINFUNC ::= 'main' CALLFUNC ';'
Instruction CALLMAINFUNC() : {
    Token m;
    Expression callMain;
} {
    m = <RW_main> callMain = CALLFUNC() <TK_semicolon> {return new MainMethod(m.beginLine, m.beginColumn, callMain);}
}
// CALLFUNC ::= TK_id '(' LISTARGS ')'
Expression CALLFUNC() : {
    Token id;
    ArrayList<Expression> l;
} {
    id = <TK_id> <TK_lpar> l = LISTARGS() <TK_rpar> {return new CallFunction(id.beginLine, id.beginColumn, id.image, l);}
}
/* DECLFUNC ::=
    DATATYPE (TK_id '(' LISTPARAMS ')' ENV | INITIDS ';') |
    'void'   TK_id '(' LISTPARAMS ')' ENV                 
*/
Instruction DECLFUNC() : {
    Token n;
    DataType t;
    Token id;
    ArrayList<Parameter> l;
    ArrayList<IDValue> arr;
    Block b;
} {
    t = DATATYPE() (
        LOOKAHEAD(2) id = <TK_id> <TK_lpar> l = LISTPARAMS() <TK_rpar> b = ENV() {return new Function(id.beginLine, id.beginColumn, id.image, l, b, t);} |
        arr = INITIDS() <TK_semicolon>                                           {return new InitVar(token.beginLine, token.beginColumn, arr, t);      } 
    ) |
    n = <RW_void> id = <TK_id> <TK_lpar> l = LISTPARAMS() <TK_rpar> b = ENV() {return new Function(n.beginLine, n.beginColumn, id.image, l, b, new DataType(Type.NULL));} 
}
// LISTPARAMS ::= (DATATYPE TK_id (',' DATATYPE TK_id)*)?
ArrayList<Parameter> LISTPARAMS() : {
    DataType t;
    Token id;
    ArrayList<Parameter> l = new ArrayList<>();
} {
    (
        t = DATATYPE() id = <TK_id> {l.add(new Parameter(id.beginLine, id.beginColumn, id.image, t));}
        (
            <TK_comma> t = DATATYPE() id = <TK_id> {l.add(new Parameter(id.beginLine, id.beginColumn, id.image, t));}
        )*
    )? {return l;}
}
// INITVAR ::= DATATYPE INITIDS ';'
Instruction INITVAR() : {
    DataType t;
    ArrayList<IDValue> arr;
} {
    t = DATATYPE() arr = INITIDS() <TK_semicolon> {return new InitVar(token.beginLine, token.beginColumn, arr, t);}
}
// INITIDS ::= TK_id ('=' EXP)? (',' TK_id ('=' EXP)?)*
ArrayList<IDValue> INITIDS() : {
    Token id;
    Expression exp = null;
    ArrayList<IDValue> l = new ArrayList<>();
} {
    id = <TK_id> (<TK_equ> exp = EXP())? {l.add(new IDValue(id.beginLine, id.beginColumn, id.image, exp));}
    (
        <TK_comma> id = <TK_id> (<TK_equ> exp = EXP())? {l.add(new IDValue(id.beginLine, id.beginColumn, id.image, exp));}
    )* {return l;}
}
// IF ::= 'if' '(' EXP ')' ENV ('else' (IF | ENV))?
Statement IF() : {
    Token r;
    Expression cn;
    Block b1;
    Statement b2 = null;
} {
    r = <RW_if> <TK_lpar> cn = EXP() <TK_rpar> b1 = ENV()
    (
        <RW_else> (
            b2 = IF() | b2 = ENV()
        )
    )? {return new If(r.beginLine, r.beginColumn, cn, b1, b2);}
}
// SWITCH ::= 'switch' '(' EXP ')' ENVS
Statement SWITCH() : {
    Token s;
    Expression exp;
    Object[] b;
} {
    s = <RW_switch> <TK_lpar> exp = EXP() <TK_rpar> b = ENVS() {return new Switch(s.beginLine, s.beginColumn, exp, (ArrayList<Case>) b[0], (Block) b[1]);}
}
// ENVS ::= '{' CASESDEFAULT '}'
Object[] ENVS() : {
    Object[] casesdefault;
} {
    <TK_lbrc> casesdefault = CASESDEFAULT() <TK_rbrc> {return casesdefault;}
}
// CASESDEFAULT ::= CASES? DEFAULT?
Object[] CASESDEFAULT() : {
    ArrayList<Statement> cases = null;
    Statement default_ = null;
} {
    (cases = CASES())? (default_ = DEFAULT())? {return new Object[] {cases, default_};}
}
// CASES ::= CASE+
ArrayList<Statement> CASES() : {
    Statement c;
    ArrayList<Statement> cases = new ArrayList<>();
} {
    (c = CASE() {cases.add(c);})+ {return cases;}
}
// CASE ::= 'case' EXP ':' (ENV | INSTRUCTIONS)
Statement CASE() : {
    Token c;
    Block b;
    ArrayList<Statement> i;
    Expression exp;
    Statement case_;
} {
    c = <RW_case> exp = EXP() <TK_colon>
    (
        b = ENV()          {case_ = new Case(c.beginLine, c.beginColumn, exp, b);} |
        i = INSTRUCTIONS() {case_ = new Case(c.beginLine, c.beginColumn, exp, new Block(c.beginLine, c.beginColumn, i));} 
    ) {return case_;}
}
// DEFAULT ::= 'default' ':' (ENV | INSTRUCTIONS)
Block DEFAULT() : {
    Token d;
    Block b;
    ArrayList<Statement> i;
    Block default_;
} {
    d = <RW_default> <TK_colon>
    (
        b = ENV()          {default_ = b;                                       } |
        i = INSTRUCTIONS() {default_ = new Block(d.beginLine, d.beginColumn, i);} 
    ) {return default_;}
}
// FOR ::= 'for' '(' ARGSFOR ')' ENV
Statement FOR() : {
    Token f;
    Object[] args;
    Block b;
} {
    f = <RW_for> <TK_lpar> args = ARGSFOR() <TK_rpar> b = ENV() {return new For(f.beginLine, f.beginColumn, (InitializeFor) args[0], (Expression) args[1], (ArrayList<Statement>) args[2], b);}
}
// ARGSFOR ::= INITIALIZEFOR? ';' EXP? ';' UPDATESFOR?
Object[] ARGSFOR() : {
    InitializeFor i = null;
    Expression e = null;
    ArrayList<Statement> u = null;
} {
    (i = INITIALIZEFOR())? <TK_semicolon> (e = EXP())? <TK_semicolon> (u = UPDATESFOR())? {return new Object[] {i, e, u};}
}
/* INITIALIZEFOR ::=
    DATATYPE INITIDSFOR |
    ASSIGNS            
*/
InitializeFor INITIALIZEFOR() : {
    DataType t;
    ArrayList<IDValue> i;
    ArrayList<Instruction> r;
} {
    t = DATATYPE() i = INITIDSFOR() {return new InitializeFor(new InitVar(i.get(0).line, i.get(0).column, i, t));} |
    r = ASSIGNS()              {return new InitializeFor(r);} 
}
// INITIDSFOR ::= TK_id '=' EXP (',' TK_id '=' EXP)*
ArrayList<IDValue> INITIDSFOR() : {
    Token id;
    Expression exp;
    ArrayList<IDValue> l = new ArrayList<>();
} {
    id = <TK_id> <TK_equ> exp = EXP() {l.add(new IDValue(id.beginLine, id.beginColumn, id.image, exp));}
    (
        <TK_comma> id = <TK_id> <TK_equ> exp = EXP() {l.add(new IDValue(id.beginLine, id.beginColumn, id.image, exp));}
    )* {return l;}
}
// ASSIGNS ::= IDPOS '=' EXP (',' IDPOS '=' EXP)*
ArrayList<Instruction> ASSIGNS() : {
    IDPos id;
    Expression e;
    ArrayList<Instruction> l = new ArrayList<>();
} {
    id = IDPOS() <TK_equ> e = EXP() {l.add(new Assign(id.line, id.column, id, e));} (
        <TK_comma> id = IDPOS() <TK_equ> e = EXP() {l.add(new Assign(id.line, id.column, id, e));}
    )* {return l;}
}
// UPDATESFOR ::= ASSIGN (',' ASSIGN)*
ArrayList<Statement> UPDATESFOR() : {
    Statement up;
    ArrayList<Statement> l = new ArrayList<>();
} {
    up = ASSIGN() {l.add(up);} (<TK_comma> up = ASSIGN() {l.add(up);})* {return l;}
}
// WHILE ::= 'while' '(' EXP ')' ENV
Statement WHILE() : {
    Token w;
    Expression exp;
    Block b;
} {
    w = <RW_while> <TK_lpar> exp = EXP() <TK_rpar> b = ENV() {return new While(w.beginLine, w.beginColumn, exp, b);}
}
// DOWHILE ::= 'do' ENV 'while' '(' EXP ')' ';'
Statement DOWHILE() : {
    Token d;
    Block b;
    Expression exp;
} {
    d = <RW_do> b = ENV() <RW_while> <TK_lpar> exp = EXP() <TK_rpar> <TK_semicolon> {return new DoWhile(d.beginLine, d.beginColumn, exp, b);}
}
// ASSIGN ::= TK_id (('=' | '+=' | '-=' | '*=' | '/=' | '%=') EXP | ('++' | '--'))
Statement ASSIGN() : {
    Token s;
    IDPos id;
    Expression exp;
} {
    id = IDPOS() (
        <TK_equ> exp = EXP() {return new Assign(id.line, id.column, id, exp);} |
        (
            s = <TK_plusc>  |
            s = <TK_minusc> |
            s = <TK_multc>  |
            s = <TK_divc>   |
            s = <TK_modc>   
        ) exp = EXP() {return new AssignComp(id.line, id.column, id, s.image, exp);} |
        (
            s = <TK_inc> |
            s = <TK_dec>
        ) {return new IncDec(id.line, id.column, id, s.image);}
    )
}
// IDPOS ::= TK_id VECTORPOS?
IDPos IDPOS() : {
    Token id;
    ArrayList<Expression> l = null;
} {
    id = <TK_id> (l = VECTORPOS())? {return new IDPos(id.beginLine, id.beginColumn, id.image, l);}
}
/* PRINT ::=
    'println' '(' EXP? ')' ';' |
    'print'   '(' EXP ')' ';'  
*/
Instruction PRINT() : {
    Token p;
    Expression exp = null;
} {
	p = <RW_println> <TK_lpar> (exp = EXP())? <TK_rpar> <TK_semicolon> {return new Print(p.beginLine, p.beginColumn, exp,  true);} |
	p = <RW_print>   <TK_lpar> exp = EXP() <TK_rpar> <TK_semicolon>    {return new Print(p.beginLine, p.beginColumn, exp, false);} 
}
// ENV ::= '{' INSTRUCTIONS '}'
Block ENV() : {
    Token l;
    ArrayList<Statement> ins;
} {
    l = <TK_lbrc> ins = INSTRUCTIONS() <TK_rbrc> {return new Block(l.beginLine, l.beginColumn, ins);}
}
// INSTRUCTIONS ::= INSTRUCTION*
ArrayList<Statement> INSTRUCTIONS() : {
    Statement i;
    ArrayList<Statement> l = new ArrayList<>();
} {
	(
        try {
            i = INSTRUCTION() {l.add(i);}
        } catch(ParseException e) {
            Token t = getNextToken();
            Outs.errors.add(Outs.newError(t.beginLine, t.beginColumn, TypeError.SYNTAX, "No se esperaba \"" + t.image + "\""));
            while(t.kind != TK_semicolon && t.kind != TK_rbrc && t != null && t.kind != EOF) {
                t = getNextToken();
            }
        }
    )* {return l;}
}
/* INSTRUCTION ::=
    INITVAR             |
    IF                  |
    SWITCH              |
    FOR                 |
    WHILE               |
    DOWHILE             |
    ASSIGN          ';' |
    CALLFUNC        ';' |
    PRINT               |
    'return' (EXP)? ';' |
    'continue'      ';' |
    'break'         ';' 
*/
Statement INSTRUCTION() : {
    Statement ins;
    Token trn;
    Expression exp = null;
} {
    ins = INITVAR()                                 {return ins;} |
    ins = IF()                                      {return ins;} |
    ins = SWITCH()                                  {return ins;} |
    ins = FOR()                                     {return ins;} |
    ins = WHILE()                                   {return ins;} |
    ins = DOWHILE()                                 {return ins;} |
    LOOKAHEAD(2) ins = ASSIGN()      <TK_semicolon> {return ins;} |
    ins = CALLFUNC()                 <TK_semicolon> {return ins;} |
	ins = PRINT()                                   {return ins;} |
    trn = <RW_return> (exp = EXP())? <TK_semicolon> {return new Return(trn.beginLine, trn.beginColumn, exp);} |
    trn = <RW_continue>              <TK_semicolon> {return new Continue(trn.beginLine, trn.beginColumn);   } |
    trn = <RW_break>                 <TK_semicolon> {return new Break(trn.beginLine, trn.beginColumn);      } 
}
// DATATYPE ::= TYPE VECTORTYPE?
DataType DATATYPE() : {
    int v;
    Type t;
} {
    t = TYPE() (
        v = VECTORTYPE() {return new DataType(Type.VECTOR, t, v);}
    )? {return new DataType(t);}
}
// VECTORTYPE ::= '[' VECTORTYPE2? ']'
int VECTORTYPE() : {
    int v = 0;
} {
    <TK_lbrk> (v = VECTORTYPE2())? <TK_rbrk> {return v + 1;}
}
// VECTORTYPE2 ::= '[' VECTORTYPE? ']'
int VECTORTYPE2() : {
    int v = 0;
} {
    <TK_lbrk> (v = VECTORTYPE())? <TK_rbrk> {return v + 1;}
}
/* TYPE ::=
    'String'  |
    'int'     |
    'boolean' |
    'char'    |
    'double'  
*/
Type TYPE() : {} {
    <RW_String>  {return Type.STRING; } |
    <RW_int>     {return Type.INT;    } |
    <RW_boolean> {return Type.BOOLEAN;} |
    <RW_char>    {return Type.CHAR;   } |
    <RW_double>  {return Type.DOUBLE; } 
}
// EXP ::= EXP8 ('?' EXP8 ':' EXP8)?
Expression EXP() : {
    Expression c, y, n;
} {
    c = EXP8() (
        <TK_question> y = EXP8() <TK_colon> n = EXP8() {c = new Ternary(c.line, c.column, c, y, n);}
    )? {return c;}
}
// EXP8 ::= EXP7 ('||' EXP7)*
Expression EXP8() : {
    Token s;
    Expression e1, e2;
} {
    e1 = EXP7() (
        s = <TK_or> e2 = EXP7() {e1 = new Logic(s.beginLine, s.beginColumn, e1, s.image, e2);}
    )* {return e1;}
}
// EXP7 ::= EXP6 ('&&' EXP6)*
Expression EXP7() : {
    Token s;
    Expression e1, e2;
} {
    e1 = EXP6() (
        s = <TK_and> e2 = EXP6() {e1 = new Logic(s.beginLine, s.beginColumn, e1, s.image, e2);}
    )* {return e1;}
}
// EXP6 ::= '!'? EXP5
Expression EXP6() : {
    Token s = null;
    Expression exp;
} {
    (s = <TK_not>)? exp = EXP5() {return s != null ? new Logic(s.beginLine, s.beginColumn, null, s.image, exp) : exp;}
}
// EXP5 ::= EXP4 (('==' | '!=') EXP4)*
Expression EXP5() : {
    Token s;
    Expression e1, e2;
} {
    e1 = EXP4() (
        (s = <TK_equequ> | s = <TK_notequ>) e2 = EXP4() {e1 = new Relational(e1.line, e1.column, e1, s.image, e2);} 
    )* {return e1;}
}
// EXP4 ::= EXP3 (('<=' | '>=' |'<' | '>') EXP3)*
Expression EXP4() : {
    Token s;
    Expression e1, e2;
} {
    e1 = EXP3() (
        (s = <TK_lessequ> | s = <TK_greaterequ> | s = <TK_less> | s = <TK_greater>) e2 = EXP3() {e1 = new Relational(e1.line, e1.column, e1, s.image, e2);} 
    )* {return e1;}
}
// EXP3 ::= EXP2 (('+' | '-') EXP2)*
Expression EXP3() : {
    Token s;
    Expression e1, e2;
} {
    e1 = EXP2() (
        (s = <TK_plus> | s = <TK_minus>) e2 = EXP2() {e1 = new Arithmetic(e1.line, e1.column, e1, s.image, e2);} 
    )* {return e1;}
}
// EXP2 ::= EXP1 (('*' | '/' | '%') EXP1)*
Expression EXP2() : {
    Token s;
    Expression e1, e2;
} {
    e1 = EXP1() (
        (s = <TK_mult> | s = <TK_div> | s = <TK_mod>) e2 = EXP1() {e1 = new Arithmetic(e1.line, e1.column, e1, s.image, e2);} 
    )* {return e1;}
}
/* EXP1 ::=
    '-' EXP1 |
    PRIMITIVE 
*/
Expression EXP1() : {
    Token s;
    Expression exp;
} {
    s = <TK_minus> exp = EXP1() {return new Arithmetic(s.beginLine, s.beginColumn, null, s.image, exp);} |
    exp = PRIMITIVE() (<TK_dot> s = <RW_size> {exp = new Native(exp.line, exp.column, s.image, exp);})? {return exp;} 
}
/* PRIMITIVE ::=
    ACCESS      |
    CAST        |
    NATIVEFUNC  |
    VECTOR      |
    TK_id       |
    TK_string   |
    TK_char     |
    TK_int      |
    TK_double   |
    RW_true     |
    RW_false    |
    '(' EXP ')' 
*/
Expression PRIMITIVE() : {
    Token p;
    Expression exp;
} {
    LOOKAHEAD(2) exp = ACCESS()     {return exp;} |
    exp = CAST()                    {return exp;} |
    exp = NATIVEFUNC()              {return exp;} |
    exp = VECTOR()                  {return exp;} |
    p = <TK_string>                 {return new Primitive(p.beginLine, p.beginColumn, p.image, Type.STRING); } |
    p = <TK_char>                   {return new Primitive(p.beginLine, p.beginColumn, p.image, Type.CHAR);   } |
    p = <TK_int>                    {return new Primitive(p.beginLine, p.beginColumn, p.image, Type.INT);    } |
    p = <TK_double>                 {return new Primitive(p.beginLine, p.beginColumn, p.image, Type.DOUBLE); } |
    p = <RW_true>                   {return new Primitive(p.beginLine, p.beginColumn, p.image, Type.BOOLEAN);} |
    p = <RW_false>                  {return new Primitive(p.beginLine, p.beginColumn, p.image, Type.BOOLEAN);} |
    <TK_lpar> exp = EXP() <TK_rpar> {return exp;} 
}
// ACCESS ::= TK_id ('(' LISTARGS ')' | VECTORPOS? ('++' | '--')?)
Expression ACCESS() : {
    Token id, s;
    IDPos idPos;
    ArrayList<Expression> l;
    ArrayList<Expression> p = null;
    Expression e;
} {
    id = <TK_id> (
        <TK_lpar> l = LISTARGS() <TK_rpar> {e = new CallFunction(id.beginLine, id.beginColumn, id.image, l);} |
        (p = VECTORPOS())? {idPos = new IDPos(id.beginLine, id.beginColumn,id.image, p);} (
            (s = <TK_inc> | s = <TK_dec>) {return new IncDec(id.beginLine, id.beginColumn, idPos, s.image);}
        )? {e = new AccessVar(id.beginLine, id.beginColumn, idPos);}
    ) {return e;}
}
// LISTARGS ::= (EXP (',' EXP)*)?
ArrayList<Expression> LISTARGS() : {
    Expression e1;
    ArrayList<Expression> l = new ArrayList<>();
} {
    (
        e1 = EXP() {l.add(e1);}
        (
            <TK_comma> e1 = EXP() {l.add(e1);}
        )*
    )? {return l;}
}
// VECTORPOS ::= '[' EXP ']' ('[' EXP ']')*
ArrayList<Expression> VECTORPOS() : {
    Expression e;
    ArrayList<Expression> l = new ArrayList<>();
} {
    <TK_lbrk> e = EXP() <TK_rbrk> {l.add(e);} (
        <TK_lbrk> e = EXP() <TK_rbrk> {l.add(e);}
    )* {return l;}
}
// CAST ::= TYPE '(' EXP ')'
Expression CAST() : {
    Token c;
    Type t;
    Expression exp;
} {
    t = TYPE() c = <TK_lpar> exp = EXP() <TK_rpar> {return new Cast(c.beginLine, c.beginColumn, exp, t);}
}
/* NATIVEFUNC ::=
    'round' '(' EXP (',' EXP)? ')' |
    'abs'   '(' EXP ')'            
*/
Expression NATIVEFUNC() : {
    Token n;
    Expression e1;
    Expression e2 = null;
} {
    n = <RW_round> <TK_lpar> e1 = EXP() (<TK_comma> e2 = EXP())? <TK_rpar> {return new Native(n.beginLine, n.beginColumn, n.image, e1, e2);} |
    n = <RW_abs>   <TK_lpar> e1 = EXP() <TK_rpar>                          {return new Native(n.beginLine, n.beginColumn, n.image, e1);    } 
}
// VECTOR ::= '[' (EXP (',' EXP)*)? ']'
Expression VECTOR() : {
    Token l;
    Expression e;
    ArrayList<Expression> v = new ArrayList<>();
} {
    l = <TK_lbrk> (
        e = EXP() {v.add(e);} (
            <TK_comma> e = EXP() {v.add(e);}
        )*
    )? <TK_rbrk> {return new Vector(l.beginLine, l.beginColumn, v);}
}