/* Parser.java */
/* Generated By:JavaCC: Do not edit this line. Parser.java */
/* 1. Package e importaciones */
package Language;
import java.util.ArrayList;
import Classes.Abstracts.*;
import Classes.Expressions.*;
import Classes.Instructions.*;
import Classes.Utils.DataType;
import Classes.Utils.IDPos;
import Classes.Utils.IDValue;
import Classes.Utils.InitializeFor;
import Classes.Utils.Outs;
import Classes.Utils.Parameter;
import Classes.Utils.Type;
import Classes.Utils.TypeError;
@SuppressWarnings({"unused", "unchecked"})
public class Parser implements ParserConstants {
/* 2. Configuraciones para el analisis (Operaciones y Declaraciones) */
    public Parser(String input) throws java.io.UnsupportedEncodingException {
        this(new java.io.ByteArrayInputStream(input.getBytes("utf-8")), null);
    }

  final public ArrayList<Instruction> parse() throws ParseException {ArrayList<Instruction> ins;
    ins = INIT();
{if ("" != null) return ins;}
    throw new Error("Missing return statement in function");
}

// INIT := INSTRUCTIONS EOF
  final public ArrayList<Instruction> INIT() throws ParseException {ArrayList<Instruction> ins;
    ins = INSTSGLOBAL();
    jj_consume_token(0);
{if ("" != null) return ins;}
    throw new Error("Missing return statement in function");
}

// INSTSGLOBAL ::= INSTGLOBAL*
  final public ArrayList<Instruction> INSTSGLOBAL() throws ParseException {Instruction i;
    ArrayList<Instruction> l = new ArrayList<>();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case RW_main:
      case RW_void:
      case RW_String:
      case RW_boolean:
      case RW_char:
      case RW_int:
      case RW_double:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      try {
        i = INSTGLOBAL();
l.add(i);
      } catch (ParseException e) {
Token t = getNextToken();
            Outs.errors.add(Outs.newError(t.beginLine, t.beginColumn, TypeError.SYNTAX, "No se esperaba \"" + t.image + "\""));
            while(t.kind != TK_semicolon && t.kind != TK_rbrc && t != null && t.kind != EOF) {
                t = getNextToken();
            }
      }
    }
{if ("" != null) return l;}
    throw new Error("Missing return statement in function");
}

/* INSTGLOBAL ::=
    CALLMAINFUNC |
    DECLFUNC     
*/
  final public Instruction INSTGLOBAL() throws ParseException {Instruction inst;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case RW_main:{
      inst = CALLMAINFUNC();
{if ("" != null) return inst;}
      break;
      }
    case RW_void:
    case RW_String:
    case RW_boolean:
    case RW_char:
    case RW_int:
    case RW_double:{
      inst = DECLFUNC();
{if ("" != null) return inst;}
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

// CALLMAINFUNC ::= 'main' CALLFUNC ';'
  final public Instruction CALLMAINFUNC() throws ParseException {Token m;
    Expression callMain;
    m = jj_consume_token(RW_main);
    callMain = CALLFUNC();
    jj_consume_token(TK_semicolon);
{if ("" != null) return new MainMethod(m.beginLine, m.beginColumn, callMain);}
    throw new Error("Missing return statement in function");
}

// CALLFUNC ::= TK_id '(' LISTARGS ')'
  final public Expression CALLFUNC() throws ParseException {Token id;
    ArrayList<Expression> l;
    id = jj_consume_token(TK_id);
    jj_consume_token(TK_lpar);
    l = LISTARGS();
    jj_consume_token(TK_rpar);
{if ("" != null) return new CallFunction(id.beginLine, id.beginColumn, id.image, l);}
    throw new Error("Missing return statement in function");
}

// INITVAR ::= DATATYPE INITIDS ';'
  final public Instruction INITVAR() throws ParseException {DataType t;
    ArrayList<IDValue> arr;
    t = DATATYPE();
    arr = INITIDS();
    jj_consume_token(TK_semicolon);
{if ("" != null) return new InitVar(token.beginLine, token.beginColumn, arr, t);}
    throw new Error("Missing return statement in function");
}

// INITIDS ::= TK_id ('=' EXP)? (',' TK_id ('=' EXP)?)*
  final public ArrayList<IDValue> INITIDS() throws ParseException {Token id;
    Expression exp = null;
    ArrayList<IDValue> l = new ArrayList<>();
    id = jj_consume_token(TK_id);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TK_equ:{
      jj_consume_token(TK_equ);
      exp = EXP();
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      ;
    }
l.add(new IDValue(id.beginLine, id.beginColumn, id.image, exp));
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TK_comma:{
        ;
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
      jj_consume_token(TK_comma);
      id = jj_consume_token(TK_id);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TK_equ:{
        jj_consume_token(TK_equ);
        exp = EXP();
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        ;
      }
l.add(new IDValue(id.beginLine, id.beginColumn, id.image, exp));
    }
{if ("" != null) return l;}
    throw new Error("Missing return statement in function");
}

/* DECLFUNC ::=
    DATATYPE   TK_id '(' LISTPARAMS ')' ENV |
    'void' TK_id '(' LISTPARAMS ')' ENV
*/
  final public Instruction DECLFUNC() throws ParseException {Token n;
    DataType t;
    Token id;
    ArrayList<Parameter> l;
    ArrayList<IDValue> arr;
    Block b;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case RW_String:
    case RW_boolean:
    case RW_char:
    case RW_int:
    case RW_double:{
      t = DATATYPE();
      if (jj_2_1(2)) {
        id = jj_consume_token(TK_id);
        jj_consume_token(TK_lpar);
        l = LISTPARAMS();
        jj_consume_token(TK_rpar);
        b = ENV();
{if ("" != null) return new Function(id.beginLine, id.beginColumn, id.image, l, b, t);}
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case TK_id:{
          arr = INITIDS();
          jj_consume_token(TK_semicolon);
{if ("" != null) return new InitVar(token.beginLine, token.beginColumn, arr, t);}
          break;
          }
        default:
          jj_la1[5] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
      }
    case RW_void:{
      n = jj_consume_token(RW_void);
      id = jj_consume_token(TK_id);
      jj_consume_token(TK_lpar);
      l = LISTPARAMS();
      jj_consume_token(TK_rpar);
      b = ENV();
{if ("" != null) return new Function(n.beginLine, n.beginColumn, id.image, l, b, new DataType(Type.NULL));}
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

// LISTPARAMS ::= (DATATYPE TK_id (',' DATATYPE TK_id)*)?
  final public ArrayList<Parameter> LISTPARAMS() throws ParseException {DataType t;
    Token id;
    ArrayList<Parameter> l = new ArrayList<>();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case RW_String:
    case RW_boolean:
    case RW_char:
    case RW_int:
    case RW_double:{
      t = DATATYPE();
      id = jj_consume_token(TK_id);
l.add(new Parameter(id.beginLine, id.beginColumn, id.image, t));
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case TK_comma:{
          ;
          break;
          }
        default:
          jj_la1[7] = jj_gen;
          break label_3;
        }
        jj_consume_token(TK_comma);
        t = DATATYPE();
        id = jj_consume_token(TK_id);
l.add(new Parameter(id.beginLine, id.beginColumn, id.image, t));
      }
      break;
      }
    default:
      jj_la1[8] = jj_gen;
      ;
    }
{if ("" != null) return l;}
    throw new Error("Missing return statement in function");
}

// IF ::= 'if' '(' EXP ')' ENV ('else' (IF | ENV))?
  final public Sentence IF() throws ParseException {Token r;
    Expression cn;
    Block b1;
    Sentence b2 = null;
    r = jj_consume_token(RW_if);
    jj_consume_token(TK_lpar);
    cn = EXP();
    jj_consume_token(TK_rpar);
    b1 = ENV();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case RW_else:{
      jj_consume_token(RW_else);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case RW_if:{
        b2 = IF();
        break;
        }
      case TK_lbrc:{
        b2 = ENV();
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[10] = jj_gen;
      ;
    }
{if ("" != null) return new If(r.beginLine, r.beginColumn, cn, b1, b2);}
    throw new Error("Missing return statement in function");
}

// SWITCH ::= 'switch' '(' EXP ')' ENVS
  final public Sentence SWITCH() throws ParseException {Token s;
    Expression exp;
    Object[] b;
    s = jj_consume_token(RW_switch);
    jj_consume_token(TK_lpar);
    exp = EXP();
    jj_consume_token(TK_rpar);
    b = ENVS();
{if ("" != null) return new Switch(s.beginLine, s.beginColumn, exp, (ArrayList<Case>) b[0], (Block) b[1]);}
    throw new Error("Missing return statement in function");
}

// ENVS ::= '{' CASESDEFAULT '}'
  final public Object[] ENVS() throws ParseException {Object[] casesdefault;
    jj_consume_token(TK_lbrc);
    casesdefault = CASESDEFAULT();
    jj_consume_token(TK_rbrc);
{if ("" != null) return casesdefault;}
    throw new Error("Missing return statement in function");
}

// CASESDEFAULT ::= (CASES)? (DEFAULT)?
  final public Object[] CASESDEFAULT() throws ParseException {ArrayList<Sentence> cases = null;
    Sentence default_ = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case RW_case:{
      cases = CASES();
      break;
      }
    default:
      jj_la1[11] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case RW_default:{
      default_ = DEFAULT();
      break;
      }
    default:
      jj_la1[12] = jj_gen;
      ;
    }
{if ("" != null) return new Object[] {cases, default_};}
    throw new Error("Missing return statement in function");
}

// CASES ::= (CASE)+
  final public ArrayList<Sentence> CASES() throws ParseException {Sentence c;
    ArrayList<Sentence> cases = new ArrayList<>();
    label_4:
    while (true) {
      c = CASE();
cases.add(c);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case RW_case:{
        ;
        break;
        }
      default:
        jj_la1[13] = jj_gen;
        break label_4;
      }
    }
{if ("" != null) return cases;}
    throw new Error("Missing return statement in function");
}

// CASE ::= 'case' EXP ':' (ENV | INSTRUCTIONS)
  final public Sentence CASE() throws ParseException {Token c;
    Block b;
    ArrayList<Sentence> i;
    Expression exp;
    Sentence case_;
    c = jj_consume_token(RW_case);
    exp = EXP();
    jj_consume_token(TK_colon);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TK_lbrc:{
      b = ENV();
case_ = new Case(c.beginLine, c.beginColumn, exp, b);
      break;
      }
    default:
      jj_la1[14] = jj_gen;
      i = INSTRUCTIONS();
case_ = new Case(c.beginLine, c.beginColumn, exp, new Block(c.beginLine, c.beginColumn, i));
    }
{if ("" != null) return case_;}
    throw new Error("Missing return statement in function");
}

// DEFAULT ::= 'default' ':' (ENV | INSTRUCTIONS)
  final public Block DEFAULT() throws ParseException {Token d;
    Block b;
    ArrayList<Sentence> i;
    Block default_;
    d = jj_consume_token(RW_default);
    jj_consume_token(TK_colon);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TK_lbrc:{
      b = ENV();
default_ = b;
      break;
      }
    default:
      jj_la1[15] = jj_gen;
      i = INSTRUCTIONS();
default_ = new Block(d.beginLine, d.beginColumn, i);
    }
{if ("" != null) return default_;}
    throw new Error("Missing return statement in function");
}

// FOR ::= 'for' '(' ARGSFOR ')' ENV
  final public Sentence FOR() throws ParseException {Token f;
    Object[] args;
    Block b;
    f = jj_consume_token(RW_for);
    jj_consume_token(TK_lpar);
    args = ARGSFOR();
    jj_consume_token(TK_rpar);
    b = ENV();
{if ("" != null) return new For(f.beginLine, f.beginColumn, (InitializeFor) args[0], (Expression) args[1], (ArrayList<Sentence>) args[2], b);}
    throw new Error("Missing return statement in function");
}

// ARGSFOR ::= (UPDATESFOR)? ';' (EXP)? ';' (UPDATESFOR)?
  final public Object[] ARGSFOR() throws ParseException {InitializeFor i = null;
    Expression e = null;
    ArrayList<Sentence> u = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case RW_String:
    case RW_boolean:
    case RW_char:
    case RW_int:
    case RW_double:
    case TK_id:{
      i = INITIALIZEFOR();
      break;
      }
    default:
      jj_la1[16] = jj_gen;
      ;
    }
    jj_consume_token(TK_semicolon);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case RW_String:
    case RW_boolean:
    case RW_char:
    case RW_int:
    case RW_double:
    case RW_true:
    case RW_false:
    case RW_round:
    case RW_abs:
    case TK_char:
    case TK_string:
    case TK_int:
    case TK_double:
    case TK_id:
    case TK_minus:
    case TK_not:
    case TK_lpar:
    case TK_lbrk:{
      e = EXP();
      break;
      }
    default:
      jj_la1[17] = jj_gen;
      ;
    }
    jj_consume_token(TK_semicolon);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TK_id:{
      u = UPDATESFOR();
      break;
      }
    default:
      jj_la1[18] = jj_gen;
      ;
    }
{if ("" != null) return new Object[] {i, e, u};}
    throw new Error("Missing return statement in function");
}

/* INITIALIZEFOR ::=
    DATATYPE INITIDSFOR |
    REASIGNS        
*/
  final public InitializeFor INITIALIZEFOR() throws ParseException {DataType t;
    ArrayList<IDValue> i;
    ArrayList<Instruction> r;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case RW_String:
    case RW_boolean:
    case RW_char:
    case RW_int:
    case RW_double:{
      t = DATATYPE();
      i = INITIDSFOR();
{if ("" != null) return new InitializeFor(new InitVar(i.get(0).line, i.get(0).column, i, t));}
      break;
      }
    case TK_id:{
      r = REASIGNS();
{if ("" != null) return new InitializeFor(r);}
      break;
      }
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

// INITIDSFOR ::= TK_id '=' EXP (',' TK_id '=' EXP)*
  final public ArrayList<IDValue> INITIDSFOR() throws ParseException {Token id;
    Expression exp;
    ArrayList<IDValue> l = new ArrayList<>();
    id = jj_consume_token(TK_id);
    jj_consume_token(TK_equ);
    exp = EXP();
l.add(new IDValue(id.beginLine, id.beginColumn, id.image, exp));
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TK_comma:{
        ;
        break;
        }
      default:
        jj_la1[20] = jj_gen;
        break label_5;
      }
      jj_consume_token(TK_comma);
      id = jj_consume_token(TK_id);
      jj_consume_token(TK_equ);
      exp = EXP();
l.add(new IDValue(id.beginLine, id.beginColumn, id.image, exp));
    }
{if ("" != null) return l;}
    throw new Error("Missing return statement in function");
}

// REASIGNS ::= ASSIGN (',' ASSIGN)*
  final public ArrayList<Instruction> REASIGNS() throws ParseException {IDPos id;
    Expression e;
    ArrayList<Instruction> l = new ArrayList<>();
    id = IDPOS();
    jj_consume_token(TK_equ);
    e = EXP();
l.add(new Assign(id.line, id.column, id, e));
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TK_comma:{
        ;
        break;
        }
      default:
        jj_la1[21] = jj_gen;
        break label_6;
      }
      jj_consume_token(TK_comma);
      id = IDPOS();
      jj_consume_token(TK_equ);
      e = EXP();
l.add(new Assign(id.line, id.column, id, e));
    }
{if ("" != null) return l;}
    throw new Error("Missing return statement in function");
}

// UPDATESFOR ::= ASSIGN (',' ASSIGN)*
  final public ArrayList<Sentence> UPDATESFOR() throws ParseException {Sentence up;
    ArrayList<Sentence> l = new ArrayList<>();
    up = ASSIGN();
l.add(up);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TK_comma:{
        ;
        break;
        }
      default:
        jj_la1[22] = jj_gen;
        break label_7;
      }
      jj_consume_token(TK_comma);
      up = ASSIGN();
l.add(up);
    }
{if ("" != null) return l;}
    throw new Error("Missing return statement in function");
}

// WHILE ::= 'while' '(' EXP ')' ENV
  final public Sentence WHILE() throws ParseException {Token w;
    Expression exp;
    Block b;
    w = jj_consume_token(RW_while);
    jj_consume_token(TK_lpar);
    exp = EXP();
    jj_consume_token(TK_rpar);
    b = ENV();
{if ("" != null) return new While(w.beginLine, w.beginColumn, exp, b);}
    throw new Error("Missing return statement in function");
}

// DOWHILE ::= 'do' ENV 'while' '(' EXP ')' ';'
  final public Sentence DOWHILE() throws ParseException {Token d;
    Block b;
    Expression exp;
    d = jj_consume_token(RW_do);
    b = ENV();
    jj_consume_token(RW_while);
    jj_consume_token(TK_lpar);
    exp = EXP();
    jj_consume_token(TK_rpar);
    jj_consume_token(TK_semicolon);
{if ("" != null) return new DoWhile(d.beginLine, d.beginColumn, exp, b);}
    throw new Error("Missing return statement in function");
}

// ASSIGN ::= TK_id (('=' | '+=' | '-=' | '*=' | '/=' | '%=') EXP | ('++' | '--'))
  final public Sentence ASSIGN() throws ParseException {Token s;
    IDPos id;
    Expression exp;
    id = IDPOS();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TK_equ:{
      jj_consume_token(TK_equ);
      exp = EXP();
{if ("" != null) return new Assign(id.line, id.column, id, exp);}
      break;
      }
    case TK_plusc:
    case TK_minusc:
    case TK_multc:
    case TK_divc:
    case TK_modc:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TK_plusc:{
        s = jj_consume_token(TK_plusc);
        break;
        }
      case TK_minusc:{
        s = jj_consume_token(TK_minusc);
        break;
        }
      case TK_multc:{
        s = jj_consume_token(TK_multc);
        break;
        }
      case TK_divc:{
        s = jj_consume_token(TK_divc);
        break;
        }
      case TK_modc:{
        s = jj_consume_token(TK_modc);
        break;
        }
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      exp = EXP();
{if ("" != null) return new AssignComp(id.line, id.column, id, s.image, exp);}
      break;
      }
    case TK_inc:
    case TK_dec:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TK_inc:{
        s = jj_consume_token(TK_inc);
        break;
        }
      case TK_dec:{
        s = jj_consume_token(TK_dec);
        break;
        }
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
{if ("" != null) return new IncDec(id.line, id.column, id, s.image);}
      break;
      }
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

// IDPOS ::= TK_id VECTORPOS?
  final public IDPos IDPOS() throws ParseException {Token id;
    ArrayList<Expression> l = null;
    id = jj_consume_token(TK_id);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TK_lbrk:{
      l = VECTORPOS();
      break;
      }
    default:
      jj_la1[26] = jj_gen;
      ;
    }
{if ("" != null) return new IDPos(id.beginLine, id.beginColumn, id.image, l);}
    throw new Error("Missing return statement in function");
}

// PRINT ::= 'PRINT' '(' EXP? ')' ';'
  final public Instruction PRINT() throws ParseException {Token p;
    Expression exp = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case RW_println:{
      p = jj_consume_token(RW_println);
      jj_consume_token(TK_lpar);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case RW_String:
      case RW_boolean:
      case RW_char:
      case RW_int:
      case RW_double:
      case RW_true:
      case RW_false:
      case RW_round:
      case RW_abs:
      case TK_char:
      case TK_string:
      case TK_int:
      case TK_double:
      case TK_id:
      case TK_minus:
      case TK_not:
      case TK_lpar:
      case TK_lbrk:{
        exp = EXP();
        break;
        }
      default:
        jj_la1[27] = jj_gen;
        ;
      }
      jj_consume_token(TK_rpar);
      jj_consume_token(TK_semicolon);
{if ("" != null) return new Print(p.beginLine, p.beginColumn, exp,  true);}
      break;
      }
    case RW_print:{
      p = jj_consume_token(RW_print);
      jj_consume_token(TK_lpar);
      exp = EXP();
      jj_consume_token(TK_rpar);
      jj_consume_token(TK_semicolon);
{if ("" != null) return new Print(p.beginLine, p.beginColumn, exp, false);}
      break;
      }
    default:
      jj_la1[28] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

// ENV ::= '{' INSTRUCTIONS '}'
  final public Block ENV() throws ParseException {Token l;
    ArrayList<Sentence> ins;
    l = jj_consume_token(TK_lbrc);
    ins = INSTRUCTIONS();
    jj_consume_token(TK_rbrc);
{if ("" != null) return new Block(l.beginLine, l.beginColumn, ins);}
    throw new Error("Missing return statement in function");
}

// INSTRUCTIONS ::= INSTRUCTION*
  final public ArrayList<Sentence> INSTRUCTIONS() throws ParseException {Sentence i;
    ArrayList<Sentence> l = new ArrayList<>();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case RW_String:
      case RW_boolean:
      case RW_char:
      case RW_int:
      case RW_double:
      case RW_if:
      case RW_for:
      case RW_while:
      case RW_do:
      case RW_switch:
      case RW_break:
      case RW_continue:
      case RW_return:
      case RW_println:
      case RW_print:
      case TK_id:{
        ;
        break;
        }
      default:
        jj_la1[29] = jj_gen;
        break label_8;
      }
      try {
        i = INSTRUCTION();
l.add(i);
      } catch (ParseException e) {
Token t = getNextToken();
            Outs.errors.add(Outs.newError(t.beginLine, t.beginColumn, TypeError.SYNTAX, "No se esperaba \"" + t.image + "\""));
            while(t.kind != TK_semicolon && t.kind != TK_rbrc && t != null && t.kind != EOF) {
                t = getNextToken();
            }
      }
    }
{if ("" != null) return l;}
    throw new Error("Missing return statement in function");
}

/* INSTRUCTION ::=
    INITVAR             |
    IF                  |
    SWITCH              |
    FOR                 |
    WHILE               |
    DOWHILE             |
    ASSIGN          ';' |
    ADDSUB          ';' |
    INCDEC          ';' |
    CALLFUNC        ';' |
    PRINT               |
    'return' (EXP)? ';' |
    'continue'      ';' |
    'break'         ';'
*/
  final public Sentence INSTRUCTION() throws ParseException {Sentence ins;
    Token trn;
    Expression exp = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case RW_String:
    case RW_boolean:
    case RW_char:
    case RW_int:
    case RW_double:{
      ins = INITVAR();
{if ("" != null) return ins;}
      break;
      }
    case RW_if:{
      ins = IF();
{if ("" != null) return ins;}
      break;
      }
    case RW_switch:{
      ins = SWITCH();
{if ("" != null) return ins;}
      break;
      }
    case RW_for:{
      ins = FOR();
{if ("" != null) return ins;}
      break;
      }
    case RW_while:{
      ins = WHILE();
{if ("" != null) return ins;}
      break;
      }
    case RW_do:{
      ins = DOWHILE();
{if ("" != null) return ins;}
      break;
      }
    default:
      jj_la1[31] = jj_gen;
      if (jj_2_2(2)) {
        ins = ASSIGN();
        jj_consume_token(TK_semicolon);
{if ("" != null) return ins;}
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case TK_id:{
          ins = CALLFUNC();
          jj_consume_token(TK_semicolon);
{if ("" != null) return ins;}
          break;
          }
        case RW_println:
        case RW_print:{
          ins = PRINT();
{if ("" != null) return ins;}
          break;
          }
        case RW_return:{
          trn = jj_consume_token(RW_return);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case RW_String:
          case RW_boolean:
          case RW_char:
          case RW_int:
          case RW_double:
          case RW_true:
          case RW_false:
          case RW_round:
          case RW_abs:
          case TK_char:
          case TK_string:
          case TK_int:
          case TK_double:
          case TK_id:
          case TK_minus:
          case TK_not:
          case TK_lpar:
          case TK_lbrk:{
            exp = EXP();
            break;
            }
          default:
            jj_la1[30] = jj_gen;
            ;
          }
          jj_consume_token(TK_semicolon);
{if ("" != null) return new Return(trn.beginLine, trn.beginColumn, exp);}
          break;
          }
        case RW_continue:{
          trn = jj_consume_token(RW_continue);
          jj_consume_token(TK_semicolon);
{if ("" != null) return new Continue(trn.beginLine, trn.beginColumn);}
          break;
          }
        case RW_break:{
          trn = jj_consume_token(RW_break);
          jj_consume_token(TK_semicolon);
{if ("" != null) return new Break(trn.beginLine, trn.beginColumn);}
          break;
          }
        default:
          jj_la1[32] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
}

// DATATYPE ::= TYPE VECTORTYPE?
  final public DataType DATATYPE() throws ParseException {int v;
    Type t;
    t = TYPE();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TK_lbrk:{
      v = VECTORTYPE();
{if ("" != null) return new DataType(Type.VECTOR, t, v);}
      break;
      }
    default:
      jj_la1[33] = jj_gen;
      ;
    }
{if ("" != null) return new DataType(t);}
    throw new Error("Missing return statement in function");
}

// VECTORTYPE ::= '[' VECTORTYPE2? ']'
  final public int VECTORTYPE() throws ParseException {int v = 0;
    jj_consume_token(TK_lbrk);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TK_lbrk:{
      v = VECTORTYPE2();
      break;
      }
    default:
      jj_la1[34] = jj_gen;
      ;
    }
    jj_consume_token(TK_rbrk);
{if ("" != null) return v + 1;}
    throw new Error("Missing return statement in function");
}

// VECTORTYPE2 ::= '[' VECTORTYPE? ']'
  final public int VECTORTYPE2() throws ParseException {int v = 0;
    jj_consume_token(TK_lbrk);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TK_lbrk:{
      v = VECTORTYPE();
      break;
      }
    default:
      jj_la1[35] = jj_gen;
      ;
    }
    jj_consume_token(TK_rbrk);
{if ("" != null) return v + 1;}
    throw new Error("Missing return statement in function");
}

/* TYPE ::=
    RW_String  |
    RW_int     |
    RW_boolean |
    RW_char    |
    RW_double  
*/
  final public Type TYPE() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case RW_String:{
      jj_consume_token(RW_String);
{if ("" != null) return Type.STRING;}
      break;
      }
    case RW_int:{
      jj_consume_token(RW_int);
{if ("" != null) return Type.INT;}
      break;
      }
    case RW_boolean:{
      jj_consume_token(RW_boolean);
{if ("" != null) return Type.BOOLEAN;}
      break;
      }
    case RW_char:{
      jj_consume_token(RW_char);
{if ("" != null) return Type.CHAR;}
      break;
      }
    case RW_double:{
      jj_consume_token(RW_double);
{if ("" != null) return Type.DOUBLE;}
      break;
      }
    default:
      jj_la1[36] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

// EXP ::= opOr ('?' opOr ':' opOr)?
  final public Expression EXP() throws ParseException {Expression c, y, n;
    c = opOr();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TK_question:{
      jj_consume_token(TK_question);
      y = opOr();
      jj_consume_token(TK_colon);
      n = opOr();
c = new Ternary(c.line, c.column, c, y, n);
      break;
      }
    default:
      jj_la1[37] = jj_gen;
      ;
    }
{if ("" != null) return c;}
    throw new Error("Missing return statement in function");
}

// opOr ::= opAnd ('||' opAnd)*
  final public Expression opOr() throws ParseException {Token s;
    Expression e1, e2;
    e1 = opAnd();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TK_or:{
        ;
        break;
        }
      default:
        jj_la1[38] = jj_gen;
        break label_9;
      }
      s = jj_consume_token(TK_or);
      e2 = opAnd();
e1 = new Logic(s.beginLine, s.beginColumn, e1, s.image, e2);
    }
{if ("" != null) return e1;}
    throw new Error("Missing return statement in function");
}

// opAnd ::= opEqu ('&&' opEqu)*
  final public Expression opAnd() throws ParseException {Token s;
    Expression e1, e2;
    e1 = opEqu();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TK_and:{
        ;
        break;
        }
      default:
        jj_la1[39] = jj_gen;
        break label_10;
      }
      s = jj_consume_token(TK_and);
      e2 = opEqu();
e1 = new Logic(s.beginLine, s.beginColumn, e1, s.image, e2);
    }
{if ("" != null) return e1;}
    throw new Error("Missing return statement in function");
}

// opEqu ::= opCmp (('==' | '!=') opCmp)*
  final public Expression opEqu() throws ParseException {Token s;
    Expression e1, e2;
    e1 = opCmp();
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TK_equequ:
      case TK_notequ:{
        ;
        break;
        }
      default:
        jj_la1[40] = jj_gen;
        break label_11;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TK_equequ:{
        s = jj_consume_token(TK_equequ);
        e2 = opCmp();
e1 = new Relational(e1.line, e1.column, e1, s.image, e2);
        break;
        }
      case TK_notequ:{
        s = jj_consume_token(TK_notequ);
        e2 = opCmp();
e1 = new Relational(e1.line, e1.column, e1, s.image, e2);
        break;
        }
      default:
        jj_la1[41] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return e1;}
    throw new Error("Missing return statement in function");
}

// opCmp ::= opAdd (('<=' | '>=' |'<' | '>') opAdd)*
  final public Expression opCmp() throws ParseException {Token s;
    Expression e1, e2;
    e1 = opAdd();
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TK_lessequ:
      case TK_moreequ:
      case TK_less:
      case TK_more:{
        ;
        break;
        }
      default:
        jj_la1[42] = jj_gen;
        break label_12;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TK_lessequ:{
        s = jj_consume_token(TK_lessequ);
        e2 = opAdd();
e1 = new Relational(e1.line, e1.column, e1, s.image, e2);
        break;
        }
      case TK_moreequ:{
        s = jj_consume_token(TK_moreequ);
        e2 = opAdd();
e1 = new Relational(e1.line, e1.column, e1, s.image, e2);
        break;
        }
      case TK_less:{
        s = jj_consume_token(TK_less);
        e2 = opAdd();
e1 = new Relational(e1.line, e1.column, e1, s.image, e2);
        break;
        }
      case TK_more:{
        s = jj_consume_token(TK_more);
        e2 = opAdd();
e1 = new Relational(e1.line, e1.column, e1, s.image, e2);
        break;
        }
      default:
        jj_la1[43] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return e1;}
    throw new Error("Missing return statement in function");
}

// opAdd ::= opMult (('+' | '-') opMult)*
  final public Expression opAdd() throws ParseException {Token s;
    Expression e1, e2;
    e1 = opMult();
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TK_plus:
      case TK_minus:{
        ;
        break;
        }
      default:
        jj_la1[44] = jj_gen;
        break label_13;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TK_plus:{
        s = jj_consume_token(TK_plus);
        e2 = opMult();
e1 = new Arithmetic(e1.line, e1.column, e1, s.image, e2);
        break;
        }
      case TK_minus:{
        s = jj_consume_token(TK_minus);
        e2 = opMult();
e1 = new Arithmetic(e1.line, e1.column, e1, s.image, e2);
        break;
        }
      default:
        jj_la1[45] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return e1;}
    throw new Error("Missing return statement in function");
}

// opMult ::= unary (('*' | '/' | '%') unary)*
  final public Expression opMult() throws ParseException {Token s;
    Expression e1, e2;
    e1 = unary();
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TK_mult:
      case TK_div:
      case TK_mod:{
        ;
        break;
        }
      default:
        jj_la1[46] = jj_gen;
        break label_14;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TK_mult:{
        s = jj_consume_token(TK_mult);
        e2 = unary();
e1 = new Arithmetic(e1.line, e1.column, e1, s.image, e2);
        break;
        }
      case TK_div:{
        s = jj_consume_token(TK_div);
        e2 = unary();
e1 = new Arithmetic(e1.line, e1.column, e1, s.image, e2);
        break;
        }
      case TK_mod:{
        s = jj_consume_token(TK_mod);
        e2 = unary();
e1 = new Arithmetic(e1.line, e1.column, e1, s.image, e2);
        break;
        }
      default:
        jj_la1[47] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return e1;}
    throw new Error("Missing return statement in function");
}

/* unary ::=
    '-' unary |
    '!' unary |
    primitive 
*/
  final public Expression unary() throws ParseException {Token s;
    Expression exp;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TK_minus:{
      s = jj_consume_token(TK_minus);
      exp = unary();
{if ("" != null) return new Arithmetic(s.beginLine, s.beginColumn, null, s.image, exp);}
      break;
      }
    case TK_not:{
      s = jj_consume_token(TK_not);
      exp = unary();
{if ("" != null) return new Logic(s.beginLine, s.beginColumn, null, s.image, exp);}
      break;
      }
    case RW_String:
    case RW_boolean:
    case RW_char:
    case RW_int:
    case RW_double:
    case RW_true:
    case RW_false:
    case RW_round:
    case RW_abs:
    case TK_char:
    case TK_string:
    case TK_int:
    case TK_double:
    case TK_id:
    case TK_lpar:
    case TK_lbrk:{
      exp = primitive();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TK_dot:{
        jj_consume_token(TK_dot);
        s = jj_consume_token(RW_size);
exp = new Native(exp.line, exp.column, s.image, exp);
        break;
        }
      default:
        jj_la1[48] = jj_gen;
        ;
      }
{if ("" != null) return exp;}
      break;
      }
    default:
      jj_la1[49] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

/* primitive ::=
    ACCESS      |
    CAST        |
    NATIVEFUNC  |
    VECTOR      |
    TK_id       |
    TK_string   |
    TK_char     |
    TK_int      |
    TK_double   |
    RW_true     |
    RW_false    |
    '(' EXP ')' 
*/
  final public Expression primitive() throws ParseException {Token p;
    Expression exp;
    if (jj_2_3(2)) {
      exp = ACCESS();
{if ("" != null) return exp;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case RW_String:
      case RW_boolean:
      case RW_char:
      case RW_int:
      case RW_double:{
        exp = CAST();
{if ("" != null) return exp;}
        break;
        }
      case RW_round:
      case RW_abs:{
        exp = NATIVEFUNC();
{if ("" != null) return exp;}
        break;
        }
      case TK_lbrk:{
        exp = VECTOR();
{if ("" != null) return exp;}
        break;
        }
      case TK_string:{
        p = jj_consume_token(TK_string);
{if ("" != null) return new Primitive(p.beginLine, p.beginColumn, p.image, Type.STRING);}
        break;
        }
      case TK_char:{
        p = jj_consume_token(TK_char);
{if ("" != null) return new Primitive(p.beginLine, p.beginColumn, p.image, Type.CHAR);}
        break;
        }
      case TK_int:{
        p = jj_consume_token(TK_int);
{if ("" != null) return new Primitive(p.beginLine, p.beginColumn, p.image, Type.INT);}
        break;
        }
      case TK_double:{
        p = jj_consume_token(TK_double);
{if ("" != null) return new Primitive(p.beginLine, p.beginColumn, p.image, Type.DOUBLE);}
        break;
        }
      case RW_true:{
        p = jj_consume_token(RW_true);
{if ("" != null) return new Primitive(p.beginLine, p.beginColumn, p.image, Type.BOOLEAN);}
        break;
        }
      case RW_false:{
        p = jj_consume_token(RW_false);
{if ("" != null) return new Primitive(p.beginLine, p.beginColumn, p.image, Type.BOOLEAN);}
        break;
        }
      case TK_lpar:{
        jj_consume_token(TK_lpar);
        exp = EXP();
        jj_consume_token(TK_rpar);
{if ("" != null) return exp;}
        break;
        }
      default:
        jj_la1[50] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
}

// ACCESS ::= TK_id ('(' LISTARGS ')' | VECTORPOS? ('++' | '--')?)
  final public Expression ACCESS() throws ParseException {Token id, s;
    IDPos idPos;
    ArrayList<Expression> l;
    ArrayList<Expression> p = null;
    Expression e;
    id = jj_consume_token(TK_id);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TK_lpar:{
      jj_consume_token(TK_lpar);
      l = LISTARGS();
      jj_consume_token(TK_rpar);
e = new CallFunction(id.beginLine, id.beginColumn, id.image, l);
      break;
      }
    default:
      jj_la1[54] = jj_gen;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TK_lbrk:{
        p = VECTORPOS();
        break;
        }
      default:
        jj_la1[51] = jj_gen;
        ;
      }
idPos = new IDPos(id.beginLine, id.beginColumn,id.image, p);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TK_inc:
      case TK_dec:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case TK_inc:{
          s = jj_consume_token(TK_inc);
          break;
          }
        case TK_dec:{
          s = jj_consume_token(TK_dec);
          break;
          }
        default:
          jj_la1[52] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
{if ("" != null) return new IncDec(id.beginLine, id.beginColumn, idPos, s.image);}
        break;
        }
      default:
        jj_la1[53] = jj_gen;
        ;
      }
e = new AccessVar(id.beginLine, id.beginColumn, idPos);
    }
{if ("" != null) return e;}
    throw new Error("Missing return statement in function");
}

// LISTARGS ::= (EXP (',' EXP)*)?
  final public ArrayList<Expression> LISTARGS() throws ParseException {Expression e1;
    ArrayList<Expression> l = new ArrayList<>();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case RW_String:
    case RW_boolean:
    case RW_char:
    case RW_int:
    case RW_double:
    case RW_true:
    case RW_false:
    case RW_round:
    case RW_abs:
    case TK_char:
    case TK_string:
    case TK_int:
    case TK_double:
    case TK_id:
    case TK_minus:
    case TK_not:
    case TK_lpar:
    case TK_lbrk:{
      e1 = EXP();
l.add(e1);
      label_15:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case TK_comma:{
          ;
          break;
          }
        default:
          jj_la1[55] = jj_gen;
          break label_15;
        }
        jj_consume_token(TK_comma);
        e1 = EXP();
l.add(e1);
      }
      break;
      }
    default:
      jj_la1[56] = jj_gen;
      ;
    }
{if ("" != null) return l;}
    throw new Error("Missing return statement in function");
}

// VECTORPOS ::= '[' EXP ']' ('[' EXP ']')*
  final public ArrayList<Expression> VECTORPOS() throws ParseException {Expression e;
    ArrayList<Expression> l = new ArrayList<>();
    jj_consume_token(TK_lbrk);
    e = EXP();
    jj_consume_token(TK_rbrk);
l.add(e);
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TK_lbrk:{
        ;
        break;
        }
      default:
        jj_la1[57] = jj_gen;
        break label_16;
      }
      jj_consume_token(TK_lbrk);
      e = EXP();
      jj_consume_token(TK_rbrk);
l.add(e);
    }
{if ("" != null) return l;}
    throw new Error("Missing return statement in function");
}

// CAST ::= TYPE TK_lpar EXP TK_rpar
  final public Expression CAST() throws ParseException {Token c;
    Type t;
    Expression exp;
    t = TYPE();
    c = jj_consume_token(TK_lpar);
    exp = EXP();
    jj_consume_token(TK_rpar);
{if ("" != null) return new Cast(c.beginLine, c.beginColumn, exp, t);}
    throw new Error("Missing return statement in function");
}

/* NATIVEFUNC ::=
    'round' '(' EXP (',' EXP)? ')' |
    'abs'   '(' EXP ')'            
*/
  final public Expression NATIVEFUNC() throws ParseException {Token n;
    Expression e1;
    Expression e2 = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case RW_round:{
      n = jj_consume_token(RW_round);
      jj_consume_token(TK_lpar);
      e1 = EXP();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TK_comma:{
        jj_consume_token(TK_comma);
        e2 = EXP();
        break;
        }
      default:
        jj_la1[58] = jj_gen;
        ;
      }
      jj_consume_token(TK_rpar);
{if ("" != null) return new Native(n.beginLine, n.beginColumn, n.image, e1, e2);}
      break;
      }
    case RW_abs:{
      n = jj_consume_token(RW_abs);
      jj_consume_token(TK_lpar);
      e1 = EXP();
      jj_consume_token(TK_rpar);
{if ("" != null) return new Native(n.beginLine, n.beginColumn, n.image, e1);}
      break;
      }
    default:
      jj_la1[59] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

// VECTOR ::= '[' (EXP (',' EXP)*)? ']'
  final public Expression VECTOR() throws ParseException {Token l;
    Expression e;
    ArrayList<Expression> v = new ArrayList<>();
    l = jj_consume_token(TK_lbrk);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case RW_String:
    case RW_boolean:
    case RW_char:
    case RW_int:
    case RW_double:
    case RW_true:
    case RW_false:
    case RW_round:
    case RW_abs:
    case TK_char:
    case TK_string:
    case TK_int:
    case TK_double:
    case TK_id:
    case TK_minus:
    case TK_not:
    case TK_lpar:
    case TK_lbrk:{
      e = EXP();
v.add(e);
      label_17:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case TK_comma:{
          ;
          break;
          }
        default:
          jj_la1[60] = jj_gen;
          break label_17;
        }
        jj_consume_token(TK_comma);
        e = EXP();
v.add(e);
      }
      break;
      }
    default:
      jj_la1[61] = jj_gen;
      ;
    }
    jj_consume_token(TK_rbrk);
{if ("" != null) return new Vector(l.beginLine, l.beginColumn, v);}
    throw new Error("Missing return statement in function");
}

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_2()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_3()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_3R_ASSIGN_402_9_22()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(33)) {
    jj_scanpos = xsp;
    if (jj_scan_token(34)) {
    jj_scanpos = xsp;
    if (jj_scan_token(35)) {
    jj_scanpos = xsp;
    if (jj_scan_token(36)) {
    jj_scanpos = xsp;
    if (jj_scan_token(37)) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_ASSIGN_401_9_21()
 {
    if (jj_scan_token(TK_equ)) return true;
    return false;
  }

  private boolean jj_3R_ACCESS_646_13_28()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(31)) {
    jj_scanpos = xsp;
    if (jj_scan_token(32)) return true;
    }
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_scan_token(TK_id)) return true;
    if (jj_scan_token(TK_lpar)) return true;
    return false;
  }

  private boolean jj_3R_ASSIGN_400_5_18()
 {
    if (jj_3R_IDPOS_420_5_20()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ASSIGN_401_9_21()) {
    jj_scanpos = xsp;
    if (jj_3R_ASSIGN_402_9_22()) {
    jj_scanpos = xsp;
    if (jj_3R_ASSIGN_409_9_23()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_ACCESS_645_10_27()
 {
    if (jj_3R_VECTORPOS_667_5_29()) return true;
    return false;
  }

  private boolean jj_3R_IDPOS_420_5_20()
 {
    if (jj_scan_token(TK_id)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_IDPOS_420_19_26()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_ACCESS_645_9_25()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ACCESS_645_10_27()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_ACCESS_646_13_28()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_ACCESS_644_9_24()
 {
    if (jj_scan_token(TK_lpar)) return true;
    return false;
  }

  private boolean jj_3_3()
 {
    if (jj_3R_ACCESS_643_5_19()) return true;
    return false;
  }

  private boolean jj_3R_VECTORPOS_667_5_29()
 {
    if (jj_scan_token(TK_lbrk)) return true;
    return false;
  }

  private boolean jj_3R_ASSIGN_409_9_23()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(31)) {
    jj_scanpos = xsp;
    if (jj_scan_token(32)) return true;
    }
    return false;
  }

  private boolean jj_3R_ACCESS_643_5_19()
 {
    if (jj_scan_token(TK_id)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ACCESS_644_9_24()) {
    jj_scanpos = xsp;
    if (jj_3R_ACCESS_645_9_25()) return true;
    }
    return false;
  }

  private boolean jj_3_2()
 {
    if (jj_3R_ASSIGN_400_5_18()) return true;
    return false;
  }

  private boolean jj_3R_IDPOS_420_19_26()
 {
    if (jj_3R_VECTORPOS_667_5_29()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public ParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[62];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	   jj_la1_init_2();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0xfe,0xfe,0x0,0x0,0x0,0x40000000,0xfc,0x0,0xf8,0x100,0x200,0x4000,0x8000,0x4000,0x0,0x0,0x400000f8,0x7e9800f8,0x40000000,0x400000f8,0x0,0x0,0x0,0x0,0x80000000,0x80000000,0x0,0x7e9800f8,0x600000,0x40673df8,0x7e9800f8,0x3df8,0x40670000,0x0,0x0,0x0,0xf8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7e9800f8,0x3e9800f8,0x0,0x80000000,0x80000000,0x0,0x0,0x7e9800f8,0x0,0x0,0x2800000,0x0,0x7e9800f8,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x0,0x0,0x8000,0x10000000,0x8000,0x0,0x0,0x10000000,0x0,0x800000,0x0,0x0,0x0,0x0,0x800000,0x800000,0x0,0x2300080,0x0,0x0,0x10000000,0x10000000,0x10000000,0x3e,0x1,0x803f,0x2000000,0x2300080,0x0,0x0,0x2300080,0x0,0x0,0x2000000,0x2000000,0x2000000,0x0,0x80000000,0x80000,0x40000,0x1800,0x1800,0x36000,0x36000,0xc0,0xc0,0x700,0x700,0x8000000,0x2300080,0x2200000,0x2000000,0x1,0x1,0x200000,0x10000000,0x2300080,0x2000000,0x10000000,0x0,0x10000000,0x2300080,};
	}
	private static void jj_la1_init_2() {
	   jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
	}
  final private JJCalls[] jj_2_rtns = new JJCalls[3];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new ParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 62; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 62; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new ParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 62; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new ParserTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 62; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 62; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 62; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   if (++jj_gc > 100) {
		 jj_gc = 0;
		 for (int i = 0; i < jj_2_rtns.length; i++) {
		   JJCalls c = jj_2_rtns[i];
		   while (c != null) {
			 if (c.gen < jj_gen) c.first = null;
			 c = c.next;
		   }
		 }
	   }
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error {
    @Override
    public Throwable fillInStackTrace() {
      return this;
    }
  }
  static private final LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		 jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		 jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
	 if (jj_rescan) {
	   int i = 0; Token tok = token;
	   while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	   if (tok != null) jj_add_error_token(kind, i);
	 }
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	 return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
	 if (pos >= 100) {
		return;
	 }

	 if (pos == jj_endpos + 1) {
	   jj_lasttokens[jj_endpos++] = kind;
	 } else if (jj_endpos != 0) {
	   jj_expentry = new int[jj_endpos];

	   for (int i = 0; i < jj_endpos; i++) {
		 jj_expentry[i] = jj_lasttokens[i];
	   }

	   for (int[] oldentry : jj_expentries) {
		 if (oldentry.length == jj_expentry.length) {
		   boolean isMatched = true;

		   for (int i = 0; i < jj_expentry.length; i++) {
			 if (oldentry[i] != jj_expentry[i]) {
			   isMatched = false;
			   break;
			 }

		   }
		   if (isMatched) {
			 jj_expentries.add(jj_expentry);
			 break;
		   }
		 }
	   }

	   if (pos != 0) {
		 jj_lasttokens[(jj_endpos = pos) - 1] = kind;
	   }
	 }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[71];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 62; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		   if ((jj_la1_2[i] & (1<<j)) != 0) {
			 la1tokens[64+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 71; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 jj_endpos = 0;
	 jj_rescan_token();
	 jj_add_error_token(0, 0);
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
	 jj_rescan = true;
	 for (int i = 0; i < 3; i++) {
	   try {
		 JJCalls p = jj_2_rtns[i];

		 do {
		   if (p.gen > jj_gen) {
			 jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
			 switch (i) {
			   case 0: jj_3_1(); break;
			   case 1: jj_3_2(); break;
			   case 2: jj_3_3(); break;
			 }
		   }
		   p = p.next;
		 } while (p != null);

		 } catch(LookaheadSuccess ls) { }
	 }
	 jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
	 JJCalls p = jj_2_rtns[index];
	 while (p.gen > jj_gen) {
	   if (p.next == null) { p = p.next = new JJCalls(); break; }
	   p = p.next;
	 }

	 p.gen = jj_gen + xla - jj_la; 
	 p.first = token;
	 p.arg = xla;
  }

  static final class JJCalls {
	 int gen;
	 Token first;
	 int arg;
	 JJCalls next;
  }

}
