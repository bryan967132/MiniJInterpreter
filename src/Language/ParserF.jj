options {
    STATIC = false;
}

PARSER_BEGIN(ParserF)

/* 1. Package e importaciones */
package Language;
import Painter.WordPainter;
public class ParserF {
/* 2. Configuraciones para el analisis (Operaciones y Declaraciones) */
    int nIB = 0;
    protected static WordPainter painter;
    public ParserF(String input, WordPainter painter) throws java.io.UnsupportedEncodingException {
        this(new java.io.ByteArrayInputStream(input.getBytes("utf-8")), null);
        ParserF.painter = painter;
    }
}

PARSER_END(ParserF)

/* 3. Reglas Semanticas */
// Reservadas
TOKEN : {
    <RW_main     : "main">     {matchedToken.beginColumn = input_stream.tokenBegin;} |
    <RW_void     : "void">     {matchedToken.beginColumn = input_stream.tokenBegin;} |
    <RW_String   : "String">   {matchedToken.beginColumn = input_stream.tokenBegin;} |
    <RW_boolean  : "boolean">  {matchedToken.beginColumn = input_stream.tokenBegin;} |
    <RW_char     : "char">     {matchedToken.beginColumn = input_stream.tokenBegin;} |
    <RW_int      : "int">      {matchedToken.beginColumn = input_stream.tokenBegin;} |
    <RW_double   : "double">   {matchedToken.beginColumn = input_stream.tokenBegin;} |
    <RW_if       : "if">       {matchedToken.beginColumn = input_stream.tokenBegin;} |
    <RW_else     : "else">     {matchedToken.beginColumn = input_stream.tokenBegin;} |
    <RW_for      : "for">      {matchedToken.beginColumn = input_stream.tokenBegin;} |
    <RW_while    : "while">    {matchedToken.beginColumn = input_stream.tokenBegin;} |
    <RW_do       : "do">       {matchedToken.beginColumn = input_stream.tokenBegin;} |
    <RW_switch   : "switch">   {matchedToken.beginColumn = input_stream.tokenBegin;} |
    <RW_case     : "case">     {matchedToken.beginColumn = input_stream.tokenBegin;} |
    <RW_default  : "default">  {matchedToken.beginColumn = input_stream.tokenBegin;} |
    <RW_break    : "break">    {matchedToken.beginColumn = input_stream.tokenBegin;} |
    <RW_continue : "continue"> {matchedToken.beginColumn = input_stream.tokenBegin;} |
    <RW_return   : "return">   {matchedToken.beginColumn = input_stream.tokenBegin;} |
    <RW_true     : "true">     {matchedToken.beginColumn = input_stream.tokenBegin;} |
    <RW_false    : "false">    {matchedToken.beginColumn = input_stream.tokenBegin;} |
    <RW_println  : "println">  {matchedToken.beginColumn = input_stream.tokenBegin;} |
    <RW_print    : "print">    {matchedToken.beginColumn = input_stream.tokenBegin;} |
    <RW_round    : "round">    {matchedToken.beginColumn = input_stream.tokenBegin;} |
    <RW_size     : "size">     {matchedToken.beginColumn = input_stream.tokenBegin;} |
    <RW_abs      : "abs">      {matchedToken.beginColumn = input_stream.tokenBegin;} 
}

// Valores
TOKEN : {
    <TK_char   : "'"((~["\n","\'","\\"])|(["\\"])(~[]))"'">      {matchedToken.beginColumn = input_stream.tokenBegin;} |
    <TK_string : "\""(((~["\n","\"","\\"])|(["\\"])(~[]))*)"\""> {matchedToken.beginColumn = input_stream.tokenBegin;} |
    <TK_int    : (["0"-"9"])+>                                   {matchedToken.beginColumn = input_stream.tokenBegin;} |
    <TK_double : (["0"-"9"])+"."(["0"-"9"])+>                    {matchedToken.beginColumn = input_stream.tokenBegin;} 
}

// Variables
TOKEN : {
    <TK_id : (["_"])*(["a"-"z","A"-"Z"])(["a"-"z","A"-"Z","_"]|["0"-"9"])*> {matchedToken.beginColumn = input_stream.tokenBegin;} 
}

// Incremento / Decremento
TOKEN : {
    <TK_inc : "++"> {matchedToken.beginColumn = input_stream.tokenBegin;} |
    <TK_dec : "--"> {matchedToken.beginColumn = input_stream.tokenBegin;} 
}

// Concatenacion
TOKEN : {
    <TK_plusc  : "+="> {matchedToken.beginColumn = input_stream.tokenBegin;} |
    <TK_minusc : "-="> {matchedToken.beginColumn = input_stream.tokenBegin;} |
    <TK_multc  : "*="> {matchedToken.beginColumn = input_stream.tokenBegin;} |
    <TK_divc   : "/="> {matchedToken.beginColumn = input_stream.tokenBegin;} |
    <TK_modc   : "%="> {matchedToken.beginColumn = input_stream.tokenBegin;} 
}

// Operadores Aritméticos
TOKEN : {
    <TK_plus  : "+"> {matchedToken.beginColumn = input_stream.tokenBegin;} |
    <TK_minus : "-"> {matchedToken.beginColumn = input_stream.tokenBegin;} |
    <TK_mult  : "*"> {matchedToken.beginColumn = input_stream.tokenBegin;} |
    <TK_div   : "/"> {matchedToken.beginColumn = input_stream.tokenBegin;} |
    <TK_mod   : "%"> {matchedToken.beginColumn = input_stream.tokenBegin;} 
}

// Operadores Relacionales
TOKEN : {
    <TK_equequ  : "=="> {matchedToken.beginColumn = input_stream.tokenBegin;} |
    <TK_notequ  : "!="> {matchedToken.beginColumn = input_stream.tokenBegin;} |
    <TK_lessequ : "<="> {matchedToken.beginColumn = input_stream.tokenBegin;} |
    <TK_moreequ : ">="> {matchedToken.beginColumn = input_stream.tokenBegin;} |
    <TK_equ     : "=">  {matchedToken.beginColumn = input_stream.tokenBegin;} |
    <TK_less    : "<">  {matchedToken.beginColumn = input_stream.tokenBegin;} |
    <TK_more    : ">">  {matchedToken.beginColumn = input_stream.tokenBegin;} 
}

// Operadores Lógicos
TOKEN : {
    <TK_and : "&&"> {matchedToken.beginColumn = input_stream.tokenBegin;} |
    <TK_or  : "||"> {matchedToken.beginColumn = input_stream.tokenBegin;} |
    <TK_not : "!">  {matchedToken.beginColumn = input_stream.tokenBegin;} 
}

// Símbolos de Agrupación
TOKEN : {
    <TK_lpar : "("> {matchedToken.beginColumn = input_stream.tokenBegin;} |
    <TK_rpar : ")"> {matchedToken.beginColumn = input_stream.tokenBegin;} |
    <TK_lbrc : "{"> {matchedToken.beginColumn = input_stream.tokenBegin;} |
    <TK_rbrc : "}"> {matchedToken.beginColumn = input_stream.tokenBegin;} |
    <TK_lbrk : "["> {matchedToken.beginColumn = input_stream.tokenBegin;} |
    <TK_rbrk : "]"> {matchedToken.beginColumn = input_stream.tokenBegin;} 
}

// Signos
TOKEN : {
    <TK_dot       : "."> {matchedToken.beginColumn = input_stream.tokenBegin;} |
    <TK_comma     : ","> {matchedToken.beginColumn = input_stream.tokenBegin;} |
    <TK_colon     : ":"> {matchedToken.beginColumn = input_stream.tokenBegin;} |
    <TK_semicolon : ";"> {matchedToken.beginColumn = input_stream.tokenBegin;} |
    <TK_question  : "?"> {matchedToken.beginColumn = input_stream.tokenBegin;} 
}

SKIP : {
    "\n"
}

SKIP : {
	" "  |
    "\r" |
    "\t" 
}

SKIP : {
    <"//"(~["\n","\r"])*>                                {ParserF.painter.COMMENT(input_stream.tokenBegin, image.length());} |
    <"/""*"(~["*"])*"*"("*"|~["*","/"](~["*"])*"*")*"/"> {ParserF.painter.COMMENT(input_stream.tokenBegin, image.length());} |
    <(~[])>                                              {ParserF.painter.ERROR(input_stream.tokenBegin, image.length());}
}

void parse() : {} {
    INIT()
}

// INIT ::= INSTRUCTIONS EOF
void INIT() : {} {
	INSTSGLOBAL() <EOF>
}
// INSTSGLOBAL ::= INSTGLOBAL*
void INSTSGLOBAL() : {} {
    (
        try {
            INSTGLOBAL()
        } catch(ParseException e) {
            Token t = e.currentToken;
            painter.SERROR(t.beginColumn, t.image.length());
            do {
                t = getNextToken();
            } while(t.kind != TK_semicolon && t.kind != TK_rbrc && t != null && t.kind != EOF);
        }
    )*
}
/* INSTGLOBAL ::=
    CALLMAINFUNC |
    DECLFUNC     
*/
void INSTGLOBAL() : {} {
    CALLMAINFUNC() |
    DECLFUNC()     
}
// CALLMAINFUNC ::= 'main' CALLFUNC ';'
void CALLMAINFUNC() : {
    Token mn;
} {
    mn = <RW_main> {painter.RW4(mn.beginColumn, mn.image.length());} CALLFUNC() <TK_semicolon>
}
// CALLFUNC ::= TK_id '(' LISTARGS ')'
void CALLFUNC() : {
    Token id;
} {
    id = <TK_id> {painter.USEFNC(id.beginColumn, id.image.length());} COLORLPAR() LISTARGS() COLORRPAR()
}
/* DECLFUNC ::=
    DATATYPE (TK_id '(' LISTPARAMS ')' ENV | INITIDS ';') |
    'void'   TK_id '(' LISTPARAMS ')' ENV                 
*/
void DECLFUNC() : {
    Token i;
} {
    DATATYPE() (
        LOOKAHEAD(2) i = <TK_id> {painter.FNC(i.beginColumn, i.image.length());} COLORLPAR() LISTPARAMS() COLORRPAR() ENV() |
        INITIDS() <TK_semicolon>
    ) |
    i = <RW_void> {painter.RW1(i.beginColumn, i.image.length());} i = <TK_id> {painter.FNC(i.beginColumn, i.image.length());} COLORLPAR() LISTPARAMS() COLORRPAR() ENV() 
}
// LISTPARAMS ::= (DATATYPE TK_id (',' DATATYPE TK_id)*)?
void LISTPARAMS() : {
    Token id;
} {
    (DATATYPE() id = <TK_id> {painter.VARIABLE(id.beginColumn, id.image.length());} (<TK_comma> DATATYPE() id = <TK_id> {painter.VARIABLE(id.beginColumn, id.image.length());})*)?
}
// INITVAR ::= DATATYPE INITIDS ';'
void INITVAR() : {} {
    DATATYPE() INITIDS() <TK_semicolon>
}
// INITIDS ::= TK_id ('=' EXP)? (',' TK_id ('=' EXP)?)*
void INITIDS() : {
    Token id;
} {
    id = <TK_id> {painter.VARIABLE(id.beginColumn, id.image.length());} (<TK_equ> EXP())? (<TK_comma> id = <TK_id> {painter.VARIABLE(id.beginColumn, id.image.length());} (<TK_equ> EXP())?)*
}
// IF ::= 'if' '(' EXP ')' ENV ('else' (IF | ENV))?
void IF() : {
    Token i;
} {
    i = <RW_if> {painter.RW2(i.beginColumn, i.image.length());} COLORLPAR() EXP() COLORRPAR() ENV() (i = <RW_else> {painter.RW2(i.beginColumn, i.image.length());} (IF() | ENV()))?
}
// SWITCH ::= 'switch' '(' EXP ')' ENVS
void SWITCH() : {
    Token sw;
} {
    sw = <RW_switch> {painter.RW2(sw.beginColumn, sw.image.length());} COLORLPAR() EXP() COLORRPAR() ENVS()
}
// ENVS ::= '{' CASESDEFAULT '}'
void ENVS() : {} {
    COLORLBRC() CASESDEFAULT() COLORRBRC()
}
// CASESDEFAULT ::= CASES? DEFAULT?
void CASESDEFAULT() : {} {
    (CASES())? (DEFAULT())?
}
// CASES ::= CASE+
void CASES() : {} {
    (CASE())+
}
// CASE ::= 'case' EXP ':' (ENV | INSTRUCTIONS)
void CASE() : {
    Token c;
} {
    c = <RW_case> {painter.RW2(c.beginColumn, c.image.length());} EXP() c = <TK_colon> {painter.SYMBS1(c.beginColumn, c.image.length());} (ENV() | INSTRUCTIONS())
}
// DEFAULT ::= 'default' ':' (ENV | INSTRUCTIONS)
void DEFAULT() : {
    Token d;
} {
    d = <RW_default> {painter.RW2(d.beginColumn, d.image.length());} d = <TK_colon> {painter.SYMBS1(d.beginColumn, d.image.length());} (ENV() | INSTRUCTIONS())
}
// FOR ::= 'for' '(' ARGSFOR ')' ENV
void FOR() : {
    Token f;
} {
    f = <RW_for> {painter.RW2(f.beginColumn, f.image.length());} COLORLPAR() ARGSFOR() COLORRPAR() ENV()
}
// ARGSFOR ::= INITIALIZEFOR? ';' EXP? ';' UPDATESFOR?
void ARGSFOR() : {} {
    (INITIALIZEFOR())? <TK_semicolon> (EXP())? <TK_semicolon> (UPDATESFOR())?
}
/* INITIALIZEFOR ::=
    DATATYPE INITIDSFOR |
    REASIGNS            
*/
void INITIALIZEFOR() : {} {
    DATATYPE() INITIDSFOR() |
    REASIGNS()              
}
// INITIDSFOR ::= TK_id '=' EXP (',' TK_id '=' EXP)*
void INITIDSFOR() : {
    Token id;
} {
    id = <TK_id> {painter.VARIABLE(id.beginColumn, id.image.length());} <TK_equ> EXP() (
        <TK_comma> id = <TK_id> {painter.VARIABLE(id.beginColumn, id.image.length());} <TK_equ> EXP()
    )*
}
// REASIGNS ::= IDPOS '=' EXP (',' IDPOS '=' EXP)*
void REASIGNS() : {} {
    IDPOS() <TK_equ> EXP() (<TK_comma> IDPOS() <TK_equ> EXP())*
}
// UPDATESFOR ::= ASSIGN (',' ASSIGN)*
void UPDATESFOR() : {} {
    ASSIGN() (<TK_comma> ASSIGN())*
}
// WHILE ::= 'while' '(' EXP ')' ENV
void WHILE() : {
    Token w;
} {
    w = <RW_while> {painter.RW2(w.beginColumn, w.image.length());} COLORLPAR() EXP() COLORRPAR() ENV()
}
// DOWHILE ::= 'do' ENV 'while' '(' EXP ')' ';'
void DOWHILE() : {
    Token w;
} {
    w = <RW_do> {painter.RW2(w.beginColumn, w.image.length());} ENV() w = <RW_while> {painter.RW2(w.beginColumn, w.image.length());} COLORLPAR() EXP() COLORRPAR() <TK_semicolon>
}
// ASSIGN ::= TK_id (('=' | '+=' | '-=' | '*=' | '/=' | '%=') EXP | ('++' | '--'))
void ASSIGN() : {} {
    IDPOS() ((<TK_equ> | <TK_plusc> | <TK_minusc>| <TK_multc> | <TK_divc> | <TK_modc>) EXP() | (<TK_inc> | <TK_dec>))
}
// IDPOS ::= TK_id VECTORPOS?
void IDPOS() : {
    Token id;
} {
    id = <TK_id> {painter.USEVARIABLE(id.beginColumn, id.image.length());} (VECTORPOS())?
}
/* PRINT ::=
    'println' '(' EXP? ')' ';' |
    'print'   '(' EXP ')' ';'  
*/
void PRINT() : {
    Token p;
} {
	p = <RW_println> {painter.USEFNC(p.beginColumn, p.image.length());} COLORLPAR() (EXP())? COLORRPAR() <TK_semicolon> |
	p = <RW_print>   {painter.USEFNC(p.beginColumn, p.image.length());} COLORLPAR() (EXP()) COLORRPAR() <TK_semicolon>  
}
// ENV ::= '{' INSTRUCTIONS '}'
void ENV() : {} {
    COLORLBRC() INSTRUCTIONS() COLORRBRC()
}
// INSTRUCTIONS ::= INSTRUCTION*
void INSTRUCTIONS() : {} {
	(
        try {
            INSTRUCTION()
        } catch(ParseException e) {
            Token t = e.currentToken;
            painter.SERROR(t.beginColumn, t.image.length());
            do {
                t = getNextToken();
            } while(t.kind != TK_semicolon && t.kind != TK_rbrc && t != null && t.kind != EOF);
        }
    )*
}
/* INSTRUCTION ::=
    INITVAR             |
    IF                  |
    SWITCH              |
    FOR                 |
    WHILE               |
    DOWHILE             |
    ASSIGN          ';' |
    CALLFUNC        ';' |
    PRINT               |
    'return' (EXP)? ';' |
    'continue'      ';' |
    'break'         ';' 
*/
void INSTRUCTION() : {
    Token t;
} {
    INITVAR()                            |
    IF()                                 |
    SWITCH()                             |
    FOR()                                |
    WHILE()                              |
    DOWHILE()                            |
    LOOKAHEAD(2) ASSIGN() <TK_semicolon> |
    CALLFUNC()            <TK_semicolon> |
	PRINT()                              |
    t = <RW_return>   {painter.RW2(t.beginColumn, t.image.length());} (EXP())? <TK_semicolon> |
    t = <RW_continue> {painter.RW2(t.beginColumn, t.image.length());}          <TK_semicolon> |
    t = <RW_break>    {painter.RW2(t.beginColumn, t.image.length());}          <TK_semicolon> 
}
// DATATYPE ::= TYPE VECTORTYPE?
void DATATYPE() : {} {
    TYPE() (VECTORTYPE())?
}
// VECTORTYPE ::= '[' VECTORTYPE2? ']'
void VECTORTYPE() : {} {
    COLORLBRK() (VECTORTYPE2())? COLORRBRK()
}
// VECTORTYPE2 ::= '[' VECTORTYPE? ']'
void VECTORTYPE2() : {} {
    COLORLBRK() (VECTORTYPE())? COLORRBRK()
}
/* TYPE ::=
    'String'  |
    'int'     |
    'boolean' |
    'char'    |
    'double'  
*/
void TYPE() : {
    Token tp;
} {
    tp = <RW_String>  {painter.RW5(tp.beginColumn, tp.image.length());} |
    tp = <RW_int>     {painter.RW1(tp.beginColumn, tp.image.length());} |
    tp = <RW_boolean> {painter.RW1(tp.beginColumn, tp.image.length());} |
    tp = <RW_char>    {painter.RW1(tp.beginColumn, tp.image.length());} |
    tp = <RW_double>  {painter.RW1(tp.beginColumn, tp.image.length());} 
}
// EXP ::= opOr ('?' opOr ':' opOr)?
void EXP() : {
    Token t;
} {
    opOr() (t = <TK_question> {painter.SYMBS1(t.beginColumn, t.image.length());} opOr() t = <TK_colon> {painter.SYMBS1(t.beginColumn, t.image.length());} opOr())?
}
// opOr ::= opAnd ('||' opAnd)*
void opOr() : {} {
    opAnd() (<TK_or> opAnd())*
}
// opAnd ::= opEqu ('&&' opEqu)*
void opAnd() : {} {
    opEqu() (<TK_and> opEqu())*
}
// opEqu ::= opCmp (('==' | '!=') opCmp)*
void opEqu() : {} {
    opCmp() ((<TK_equequ> | <TK_notequ>) opCmp())*
}
// opCmp ::= opAdd (('<=' | '>=' |'<' | '>') opAdd)*
void opCmp() : {} {
    opAdd() ((<TK_lessequ> | <TK_moreequ> | <TK_less> | <TK_more>) opAdd())*
}
// opAdd ::= opMult (('+' | '-') opMult)*
void opAdd() : {} {
    opMult() ((<TK_plus> | <TK_minus>) opMult())*
}
// opMult ::= unary (('*' | '/' | '%') unary)*
void opMult() : {} {
    unary() ((<TK_mult> | <TK_div> | <TK_mod>) unary())*
}
/* unary ::=
    '-' unary |
    '!' unary |
    primitive 
*/
void unary() : {
    Token id;
} {
    <TK_minus> unary() |
    <TK_not>   unary() |
    primitive() (<TK_dot> id = <RW_size> {painter.ATTRIB(id.beginColumn, id.image.length());})?
}
/* primitive ::=
    ACCESS      |
    CAST        |
    NATIVEFUNC  |
    VECTOR      |
    TK_id       |
    TK_string   |
    TK_char     |
    TK_int      |
    TK_double   |
    RW_true     |
    RW_false    |
    '(' EXP ')' 
*/
void primitive() : {
    Token tr;
} {
    LOOKAHEAD(2) ACCESS()         |
    CAST()                        |
    NATIVEFUNC()                  |
    VECTOR()                      |
    tr = <TK_id>                  {painter.USEVARIABLE(tr.beginColumn, tr.image.length());} |
    tr = <TK_string>              {painter.STRING(tr.beginColumn, tr.image.length());     } |
    tr = <TK_char>                {painter.CHAR(tr.beginColumn, tr.image.length());       } |
    tr = <TK_int>                 {painter.NUMBER(tr.beginColumn, tr.image.length());     } |
    tr = <TK_double>              {painter.NUMBER(tr.beginColumn, tr.image.length());     } |
    tr = <RW_true>                {painter.RW3(tr.beginColumn, tr.image.length());        } |
    tr = <RW_false>               {painter.RW3(tr.beginColumn, tr.image.length());        } |
    COLORLPAR() EXP() COLORRPAR() 
}
// ACCESS ::= TK_id ('(' LISTARGS ')' | VECTORPOS? ('++' | '--')?)
void ACCESS() : {
    Token id;
} {
    id = <TK_id> (
        {painter.USEFNC(id.beginColumn, id.image.length());} COLORLPAR() LISTARGS() COLORRPAR() |
        {painter.USEVARIABLE(id.beginColumn, id.image.length());} (VECTORPOS())? (<TK_inc> | <TK_dec>)?
    )
}
// LISTARGS ::= (EXP (',' EXP)*)?
void LISTARGS() : {} {
    (EXP() (<TK_comma> EXP())*)?
}
// VECTORPOS ::= '[' EXP ']' ('[' EXP ']')*
void VECTORPOS() : {} {
    COLORLBRK() EXP() COLORRBRK() (COLORLBRK() EXP() COLORRBRK())*
}
// CAST ::= TYPE '(' EXP ')'
void CAST() : {} {
    TYPE() COLORLPAR() EXP() COLORRPAR()

}
/* NATIVEFUNC ::=
    'round' '(' EXP (',' EXP)? ')' |
    'abs'   '(' EXP ')'            
*/
void NATIVEFUNC() : {
    Token n;
} {
    n = <RW_round> {painter.USEFNC(n.beginColumn, n.image.length());} COLORLPAR() EXP() (<TK_comma> EXP())? COLORRPAR() |
    n = <RW_abs>   {painter.USEFNC(n.beginColumn, n.image.length());} COLORLPAR() EXP() COLORRPAR()                     
}
// VECTOR ::= '[' (EXP (',' EXP)*)? ']'
void VECTOR() : {} {
    COLORLBRK() (EXP() (<TK_comma> EXP())*)? COLORRBRK()
}

void COLORLBRK() : {
    Token l;
} {
    l = <TK_lbrk> {painter.BRKT(nIB, l.beginColumn, l.image.length()); nIB ++;}
}

void COLORRBRK() : {
    Token r;
} {
    r = <TK_rbrk> {nIB --; painter.BRKT(nIB, r.beginColumn, r.image.length());}
}

void COLORLBRC() : {
    Token l;
} {
    l = <TK_lbrc> {painter.BRKT(nIB, l.beginColumn, l.image.length()); nIB ++;}
}

void COLORRBRC() : {
    Token r;
} {
    r = <TK_rbrc> {nIB --; painter.BRKT(nIB, r.beginColumn, r.image.length());}
}

void COLORLPAR() : {
    Token l;
} {
    l = <TK_lpar> {painter.BRKT(nIB, l.beginColumn, l.image.length()); nIB ++;}
}

void COLORRPAR() : {
    Token r;
} {
    r = <TK_rpar> {nIB --; painter.BRKT(nIB, r.beginColumn, r.image.length());}
}