/* Generated By:JavaCC: Do not edit this line. ParserConstants.java */
/* 1. Package e importaciones */
package Language;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int RW_main = 1;
  /** RegularExpression Id. */
  int RW_void = 2;
  /** RegularExpression Id. */
  int RW_String = 3;
  /** RegularExpression Id. */
  int RW_boolean = 4;
  /** RegularExpression Id. */
  int RW_char = 5;
  /** RegularExpression Id. */
  int RW_int = 6;
  /** RegularExpression Id. */
  int RW_double = 7;
  /** RegularExpression Id. */
  int RW_if = 8;
  /** RegularExpression Id. */
  int RW_else = 9;
  /** RegularExpression Id. */
  int RW_for = 10;
  /** RegularExpression Id. */
  int RW_while = 11;
  /** RegularExpression Id. */
  int RW_do = 12;
  /** RegularExpression Id. */
  int RW_switch = 13;
  /** RegularExpression Id. */
  int RW_case = 14;
  /** RegularExpression Id. */
  int RW_default = 15;
  /** RegularExpression Id. */
  int RW_break = 16;
  /** RegularExpression Id. */
  int RW_continue = 17;
  /** RegularExpression Id. */
  int RW_return = 18;
  /** RegularExpression Id. */
  int RW_true = 19;
  /** RegularExpression Id. */
  int RW_false = 20;
  /** RegularExpression Id. */
  int RW_println = 21;
  /** RegularExpression Id. */
  int RW_print = 22;
  /** RegularExpression Id. */
  int RW_round = 23;
  /** RegularExpression Id. */
  int RW_size = 24;
  /** RegularExpression Id. */
  int RW_abs = 25;
  /** RegularExpression Id. */
  int TK_char = 26;
  /** RegularExpression Id. */
  int TK_string = 27;
  /** RegularExpression Id. */
  int TK_int = 28;
  /** RegularExpression Id. */
  int TK_double = 29;
  /** RegularExpression Id. */
  int TK_id = 30;
  /** RegularExpression Id. */
  int TK_inc = 31;
  /** RegularExpression Id. */
  int TK_dec = 32;
  /** RegularExpression Id. */
  int TK_plusc = 33;
  /** RegularExpression Id. */
  int TK_minusc = 34;
  /** RegularExpression Id. */
  int TK_multc = 35;
  /** RegularExpression Id. */
  int TK_divc = 36;
  /** RegularExpression Id. */
  int TK_modc = 37;
  /** RegularExpression Id. */
  int TK_plus = 38;
  /** RegularExpression Id. */
  int TK_minus = 39;
  /** RegularExpression Id. */
  int TK_mult = 40;
  /** RegularExpression Id. */
  int TK_div = 41;
  /** RegularExpression Id. */
  int TK_mod = 42;
  /** RegularExpression Id. */
  int TK_equequ = 43;
  /** RegularExpression Id. */
  int TK_notequ = 44;
  /** RegularExpression Id. */
  int TK_lessequ = 45;
  /** RegularExpression Id. */
  int TK_greaterequ = 46;
  /** RegularExpression Id. */
  int TK_equ = 47;
  /** RegularExpression Id. */
  int TK_less = 48;
  /** RegularExpression Id. */
  int TK_greater = 49;
  /** RegularExpression Id. */
  int TK_and = 50;
  /** RegularExpression Id. */
  int TK_or = 51;
  /** RegularExpression Id. */
  int TK_not = 52;
  /** RegularExpression Id. */
  int TK_lpar = 53;
  /** RegularExpression Id. */
  int TK_rpar = 54;
  /** RegularExpression Id. */
  int TK_lbrc = 55;
  /** RegularExpression Id. */
  int TK_rbrc = 56;
  /** RegularExpression Id. */
  int TK_lbrk = 57;
  /** RegularExpression Id. */
  int TK_rbrk = 58;
  /** RegularExpression Id. */
  int TK_dot = 59;
  /** RegularExpression Id. */
  int TK_comma = 60;
  /** RegularExpression Id. */
  int TK_colon = 61;
  /** RegularExpression Id. */
  int TK_semicolon = 62;
  /** RegularExpression Id. */
  int TK_question = 63;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\"main\"",
    "\"void\"",
    "\"String\"",
    "\"boolean\"",
    "\"char\"",
    "\"int\"",
    "\"double\"",
    "\"if\"",
    "\"else\"",
    "\"for\"",
    "\"while\"",
    "\"do\"",
    "\"switch\"",
    "\"case\"",
    "\"default\"",
    "\"break\"",
    "\"continue\"",
    "\"return\"",
    "\"true\"",
    "\"false\"",
    "\"println\"",
    "\"print\"",
    "\"round\"",
    "\"size\"",
    "\"abs\"",
    "<TK_char>",
    "<TK_string>",
    "<TK_int>",
    "<TK_double>",
    "<TK_id>",
    "\"++\"",
    "\"--\"",
    "\"+=\"",
    "\"-=\"",
    "\"*=\"",
    "\"/=\"",
    "\"%=\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\"==\"",
    "\"!=\"",
    "\"<=\"",
    "\">=\"",
    "\"=\"",
    "\"<\"",
    "\">\"",
    "\"&&\"",
    "\"||\"",
    "\"!\"",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\".\"",
    "\",\"",
    "\":\"",
    "\";\"",
    "\"?\"",
    "\"\\n\"",
    "\" \"",
    "\"\\r\"",
    "\"\\t\"",
    "<token of kind 68>",
    "<token of kind 69>",
    "<token of kind 70>",
  };

}
